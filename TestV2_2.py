#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#
# SPDX-License-Identifier: GPL-3.0
#
# GNU Radio Python Flow Graph
# Title: RTL-SDR reciever
# Author: Tyler Kovach
# GNU Radio version: 3.8.1.0

from distutils.version import StrictVersion

if __name__ == '__main__':
    import ctypes
    import sys
    if sys.platform.startswith('linux'):
        try:
            x11 = ctypes.cdll.LoadLibrary('libX11.so')
            x11.XInitThreads()
        except:
            print("Warning: failed to XInitThreads()")

from PyQt5 import Qt
from gnuradio import qtgui
from gnuradio.filter import firdes
import sip
from gnuradio import analog
from gnuradio import audio
from gnuradio import blocks
from gnuradio import filter
from gnuradio import gr
import sys
import signal
from argparse import ArgumentParser
from gnuradio.eng_arg import eng_float, intx
from gnuradio import eng_notation
from gnuradio.qtgui import Range, RangeWidget
import osmosdr
import time

from gnuradio import qtgui

class TestV2_2(gr.top_block, Qt.QWidget):

    def __init__(self):
        gr.top_block.__init__(self, "RTL-SDR reciever")
        Qt.QWidget.__init__(self)
        self.setWindowTitle("RTL-SDR reciever")
        qtgui.util.check_set_qss()
        try:
            self.setWindowIcon(Qt.QIcon.fromTheme('gnuradio-grc'))
        except:
            pass
        self.top_scroll_layout = Qt.QVBoxLayout()
        self.setLayout(self.top_scroll_layout)
        self.top_scroll = Qt.QScrollArea()
        self.top_scroll.setFrameStyle(Qt.QFrame.NoFrame)
        self.top_scroll_layout.addWidget(self.top_scroll)
        self.top_scroll.setWidgetResizable(True)
        self.top_widget = Qt.QWidget()
        self.top_scroll.setWidget(self.top_widget)
        self.top_layout = Qt.QVBoxLayout(self.top_widget)
        self.top_grid_layout = Qt.QGridLayout()
        self.top_layout.addLayout(self.top_grid_layout)

        self.settings = Qt.QSettings("GNU Radio", "TestV2_2")

        try:
            if StrictVersion(Qt.qVersion()) < StrictVersion("5.0.0"):
                self.restoreGeometry(self.settings.value("geometry").toByteArray())
            else:
                self.restoreGeometry(self.settings.value("geometry"))
        except:
            pass

        ##################################################
        # Variables
        ##################################################
        self.volume = volume = 50e-3
        self.tuning = tuning = 20.1e6
        self.squelch = squelch = -60
        self.samp_rate = samp_rate = 1411200
        self.resistance = resistance = 100
        self.boltz = boltz = 1.380648E-23
        self.bandwidth = bandwidth = 300000

        ##################################################
        # Blocks
        ##################################################
        self._volume_range = Range(0, 10, 50e-3, 50e-3, 200)
        self._volume_win = RangeWidget(self._volume_range, self.set_volume, 'volume', "counter_slider", float)
        self.top_grid_layout.addWidget(self._volume_win)
        self._tuning_range = Range(0.5e6, 30e6, 10e3, 20.1e6, 200)
        self._tuning_win = RangeWidget(self._tuning_range, self.set_tuning, 'tuning', "counter_slider", float)
        self.top_grid_layout.addWidget(self._tuning_win)
        self._squelch_range = Range(-120, 0, 1, -60, 200)
        self._squelch_win = RangeWidget(self._squelch_range, self.set_squelch, 'squelch', "counter_slider", float)
        self.top_grid_layout.addWidget(self._squelch_win)
        self.rtlsdr_source_0 = osmosdr.source(
            args="numchan=" + str(1) + " " + "rtl=0,direct_samp=2"
        )
        self.rtlsdr_source_0.set_time_now(osmosdr.time_spec_t(time.time()), osmosdr.ALL_MBOARDS)
        self.rtlsdr_source_0.set_sample_rate(samp_rate)
        self.rtlsdr_source_0.set_center_freq(tuning, 0)
        self.rtlsdr_source_0.set_freq_corr(0, 0)
        self.rtlsdr_source_0.set_dc_offset_mode(2, 0)
        self.rtlsdr_source_0.set_iq_balance_mode(0, 0)
        self.rtlsdr_source_0.set_gain_mode(False, 0)
        self.rtlsdr_source_0.set_gain(0, 0)
        self.rtlsdr_source_0.set_if_gain(0, 0)
        self.rtlsdr_source_0.set_bb_gain(0, 0)
        self.rtlsdr_source_0.set_antenna('', 0)
        self.rtlsdr_source_0.set_bandwidth(bandwidth, 0)
        self.qtgui_time_sink_x_1 = qtgui.time_sink_c(
            10000, #size
            samp_rate, #samp_rate
            "", #name
            1 #number of inputs
        )
        self.qtgui_time_sink_x_1.set_update_time(1)
        self.qtgui_time_sink_x_1.set_y_axis(-1E-2, 1E-2)

        self.qtgui_time_sink_x_1.set_y_label('Amplitude', "")

        self.qtgui_time_sink_x_1.enable_tags(True)
        self.qtgui_time_sink_x_1.set_trigger_mode(qtgui.TRIG_MODE_FREE, qtgui.TRIG_SLOPE_POS, 0.0, 0, 0, "")
        self.qtgui_time_sink_x_1.enable_autoscale(False)
        self.qtgui_time_sink_x_1.enable_grid(False)
        self.qtgui_time_sink_x_1.enable_axis_labels(True)
        self.qtgui_time_sink_x_1.enable_control_panel(False)
        self.qtgui_time_sink_x_1.enable_stem_plot(False)


        labels = ['Signal 1', 'Signal 2', 'Signal 3', 'Signal 4', 'Signal 5',
            'Signal 6', 'Signal 7', 'Signal 8', 'Signal 9', 'Signal 10']
        widths = [1, 1, 1, 1, 1,
            1, 1, 1, 1, 1]
        colors = ['blue', 'red', 'green', 'black', 'cyan',
            'magenta', 'yellow', 'dark red', 'dark green', 'dark blue']
        alphas = [1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0]
        styles = [1, 1, 1, 1, 1,
            1, 1, 1, 1, 1]
        markers = [-1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1]


        for i in range(2):
            if len(labels[i]) == 0:
                if (i % 2 == 0):
                    self.qtgui_time_sink_x_1.set_line_label(i, "Re{{Data {0}}}".format(i/2))
                else:
                    self.qtgui_time_sink_x_1.set_line_label(i, "Im{{Data {0}}}".format(i/2))
            else:
                self.qtgui_time_sink_x_1.set_line_label(i, labels[i])
            self.qtgui_time_sink_x_1.set_line_width(i, widths[i])
            self.qtgui_time_sink_x_1.set_line_color(i, colors[i])
            self.qtgui_time_sink_x_1.set_line_style(i, styles[i])
            self.qtgui_time_sink_x_1.set_line_marker(i, markers[i])
            self.qtgui_time_sink_x_1.set_line_alpha(i, alphas[i])

        self._qtgui_time_sink_x_1_win = sip.wrapinstance(self.qtgui_time_sink_x_1.pyqwidget(), Qt.QWidget)
        self.top_grid_layout.addWidget(self._qtgui_time_sink_x_1_win)
        self.qtgui_time_sink_x_0 = qtgui.time_sink_f(
            10000, #size
            samp_rate/32, #samp_rate
            "", #name
            1 #number of inputs
        )
        self.qtgui_time_sink_x_0.set_update_time(1)
        self.qtgui_time_sink_x_0.set_y_axis(1E-3, -1E-3)

        self.qtgui_time_sink_x_0.set_y_label('Temperature', "Kk")

        self.qtgui_time_sink_x_0.enable_tags(True)
        self.qtgui_time_sink_x_0.set_trigger_mode(qtgui.TRIG_MODE_FREE, qtgui.TRIG_SLOPE_POS, 0.0, 0, 0, "")
        self.qtgui_time_sink_x_0.enable_autoscale(True)
        self.qtgui_time_sink_x_0.enable_grid(False)
        self.qtgui_time_sink_x_0.enable_axis_labels(True)
        self.qtgui_time_sink_x_0.enable_control_panel(False)
        self.qtgui_time_sink_x_0.enable_stem_plot(False)


        labels = ['Signal 1', 'Signal 2', 'Signal 3', 'Signal 4', 'Signal 5',
            'Signal 6', 'Signal 7', 'Signal 8', 'Signal 9', 'Signal 10']
        widths = [1, 1, 1, 1, 1,
            1, 1, 1, 1, 1]
        colors = ['blue', 'red', 'green', 'black', 'cyan',
            'magenta', 'yellow', 'dark red', 'dark green', 'dark blue']
        alphas = [1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0]
        styles = [1, 1, 1, 1, 1,
            1, 1, 1, 1, 1]
        markers = [-1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1]


        for i in range(1):
            if len(labels[i]) == 0:
                self.qtgui_time_sink_x_0.set_line_label(i, "Data {0}".format(i))
            else:
                self.qtgui_time_sink_x_0.set_line_label(i, labels[i])
            self.qtgui_time_sink_x_0.set_line_width(i, widths[i])
            self.qtgui_time_sink_x_0.set_line_color(i, colors[i])
            self.qtgui_time_sink_x_0.set_line_style(i, styles[i])
            self.qtgui_time_sink_x_0.set_line_marker(i, markers[i])
            self.qtgui_time_sink_x_0.set_line_alpha(i, alphas[i])

        self._qtgui_time_sink_x_0_win = sip.wrapinstance(self.qtgui_time_sink_x_0.pyqwidget(), Qt.QWidget)
        self.top_grid_layout.addWidget(self._qtgui_time_sink_x_0_win)
        self.qtgui_freq_sink_x_0 = qtgui.freq_sink_c(
            2048, #size
            firdes.WIN_BLACKMAN_hARRIS, #wintype
            tuning, #fc
            bandwidth, #bw
            "", #name
            1
        )
        self.qtgui_freq_sink_x_0.set_update_time(0.10)
        self.qtgui_freq_sink_x_0.set_y_axis(-140, 10)
        self.qtgui_freq_sink_x_0.set_y_label('Relative Gain', 'dB')
        self.qtgui_freq_sink_x_0.set_trigger_mode(qtgui.TRIG_MODE_FREE, 0.0, 0, "")
        self.qtgui_freq_sink_x_0.enable_autoscale(False)
        self.qtgui_freq_sink_x_0.enable_grid(False)
        self.qtgui_freq_sink_x_0.set_fft_average(0.05)
        self.qtgui_freq_sink_x_0.enable_axis_labels(True)
        self.qtgui_freq_sink_x_0.enable_control_panel(False)



        labels = ['', '', '', '', '',
            '', '', '', '', '']
        widths = [1, 1, 1, 1, 1,
            1, 1, 1, 1, 1]
        colors = ["blue", "red", "green", "black", "cyan",
            "magenta", "yellow", "dark red", "dark green", "dark blue"]
        alphas = [1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0]

        for i in range(1):
            if len(labels[i]) == 0:
                self.qtgui_freq_sink_x_0.set_line_label(i, "Data {0}".format(i))
            else:
                self.qtgui_freq_sink_x_0.set_line_label(i, labels[i])
            self.qtgui_freq_sink_x_0.set_line_width(i, widths[i])
            self.qtgui_freq_sink_x_0.set_line_color(i, colors[i])
            self.qtgui_freq_sink_x_0.set_line_alpha(i, alphas[i])

        self._qtgui_freq_sink_x_0_win = sip.wrapinstance(self.qtgui_freq_sink_x_0.pyqwidget(), Qt.QWidget)
        self.top_grid_layout.addWidget(self._qtgui_freq_sink_x_0_win)
        self.fir_filter_xxx_0 = filter.fir_filter_ccf(32, [8.753802262055632e-13,-1.8390318434757802e-10,-5.081692289188311e-10,-6.252549034080346e-10,-1.8569472348684002e-10,1.1635410412935698e-09,3.777477441957444e-09,8.015866193034071e-09,1.4236948508994374e-08,2.2801613042133795e-08,3.407516047104764e-08,4.842081935407805e-08,6.620299330961643e-08,8.778596338743228e-08,1.1353548501347177e-07,1.438124570540822e-07,1.7898918258651975e-07,2.1941231409527973e-07,2.6545063747107633e-07,3.174674247929943e-07,3.758073887638602e-07,4.408233564845432e-07,5.12872304625489e-07,5.922928494328517e-07,6.794302294110821e-07,7.746118058093998e-07,8.781860856288404e-07,9.904545095196227e-07,1.1117487019873806e-06,1.242392613676202e-06,1.382679784001084e-06,1.5328964764194097e-06,1.6933606730162865e-06,1.8643389694261714e-06,2.0461118310777238e-06,2.238931529063848e-06,2.44306420427165e-06,2.6587472348182928e-06,2.886218908315641e-06,3.1257034152076812e-06,3.377400389581453e-06,3.6415237900655484e-06,3.918250513379462e-06,4.207752681395505e-06,4.510202415985987e-06,4.825722044188296e-06,5.154444806976244e-06,5.496507583302446e-06,5.851987680216553e-06,6.220973318704637e-06,6.603532710869331e-06,6.999722245382145e-06,7.409551926684799e-06,7.83306677476503e-06,8.270239050034434e-06,8.721038284420501e-06,9.185444469039794e-06,9.663357559475116e-06,1.015472662402317e-05,1.0659428880899213e-05,1.117732699640328e-05,1.1708309102687053e-05,1.225215874001151e-05,1.2808688552468084e-05,1.3377697541727684e-05,1.3958930139779113e-05,1.4552138054568786e-05,1.5156994777498767e-05,1.5773206541780382e-05,1.6400446838815697e-05,1.7038297301041894e-05,1.768640140653588e-05,1.8344344425713643e-05,1.901166069728788e-05,1.9687870008056052e-05,2.0372472135932185e-05,2.1064952306915075e-05,2.1764715711469762e-05,2.2471233023679815e-05,2.3183831217465922e-05,2.3901900931377895e-05,2.462472184561193e-05,2.5351642761961557e-05,2.6081925170728937e-05,2.681477963051293e-05,2.754942761384882e-05,2.8285030566621572e-05,2.9020733563811518e-05,2.97556853183778e-05,3.048897451662924e-05,3.12196061713621e-05,3.194667078787461e-05,3.266912608523853e-05,3.338593160151504e-05,3.409605415072292e-05,3.479837323538959e-05,3.5491804737830535e-05,3.6175184504827484e-05,3.684729745145887e-05,3.750697578652762e-05,3.815295349340886e-05,3.878399729728699e-05,3.939878297387622e-05,3.9996011764742434e-05,4.057431942783296e-05,4.113233444513753e-05,4.166865619481541e-05,4.218189133098349e-05,4.2670522816479206e-05,4.313312820158899e-05,4.356821227702312e-05,4.397421798785217e-05,4.4349621020955965e-05,4.469287159736268e-05,4.500235809246078e-05,4.527647979557514e-05,4.551361780613661e-05,4.5712138671660796e-05,4.5870379835832864e-05,4.5986649638507515e-05,4.605929643730633e-05,4.608655217452906e-05,4.60667724837549e-05,4.599820385919884e-05,4.5879096433054656e-05,4.5707685785600916e-05,4.548226570477709e-05,4.5201046305010095e-05,4.486228499445133e-05,4.446417005965486e-05,4.400496982270852e-05,4.3482908949954435e-05,4.289620483177714e-05,4.2243096686434e-05,4.152180190430954e-05,4.073059244547039e-05,3.986770025221631e-05,3.89313863706775e-05,3.7919915484962985e-05,3.683158502099104e-05,3.566468149074353e-05,3.441752051003277e-05,3.308843224658631e-05,3.1675768696004525e-05,3.0177918233675882e-05,2.859326559701003e-05,2.692024463613052e-05,2.5157296477118507e-05,2.330292591068428e-05,2.13556249946123e-05,1.9313973098178394e-05,1.7176529581774957e-05,1.4941943845769856e-05,1.2608870747499168e-05,1.0176027899433393e-05,7.642172022315208e-06,5.006106221117079e-06,2.266687033625203e-06,-5.771796054432343e-07,-3.5265309179521864e-06,-6.582349215022987e-06,-9.745554962137248e-06,-1.3017009223403875e-05,-1.6397512808907777e-05,-1.9887787857442163e-05,-2.348851012357045e-05,-2.720025986491237e-05,-3.102355913142674e-05,-3.495885539450683e-05,-3.9006510633043945e-05,-4.316681588534266e-05,-4.743996396427974e-05,-5.182608583709225e-05,-5.632521788356826e-05,-6.093728734413162e-05,-6.56621705275029e-05,-7.049961277516559e-05,-7.544927211711183e-05,-8.051074109971523e-05,-8.568346675019711e-05,-9.096680878428742e-05,-9.63600687100552e-05,-0.0001018623515847139,-0.00010747275518951938,-0.00011319017357891425,-0.00011901346442755312,-0.00012494134716689587,-0.00013097240298520774,-0.00013710510393138975,-0.00014333787839859724,-0.00014966889284551144,-0.00015609634283464402,-0.00016261811833828688,-0.00016923219664022326,-0.0001759363221935928,-0.0001827280648285523,-0.00018960496527142823,-0.00019656428776215762,-0.0002036033693002537,-0.000210719314054586,-0.0002179090224672109,-0.00022516935132443905,-0.0002324970264453441,-0.00023988852626644075,-0.0002473403874319047,-0.0002548488264437765,-0.0002624100015964359,-0.0002700199547689408,-0.0002776744950097054,-0.0002853694895748049,-0.0002931003400590271,-0.00030086268088780344,-0.00030865182634443045,-0.00031646282877773046,-0.00032429085695184767,-0.0003321307012811303,-0.00033997726859524846,-0.00034782508737407625,-0.00035566871520131826,-0.0003635023895185441,-0.0003713206388056278,-0.0003791172057390213,-0.0003868863277602941,-0.0003946215729229152,-0.00040231680031865835,-0.0004099657235201448,-0.0004175614449195564,-0.0004250976489856839,-0.000432567234383896,-0.00043996344902552664,-0.00044727924978360534,-0.00045450738980434835,-0.00046164062223397195,-0.0004686716420110315,-0.00047559282393194735,-0.0004823966883122921,-0.0004890754353255033,-0.0004956212360411882,-0.0005020263488404453,-0.0005082825664430857,-0.0005143819143995643,-0.0005203161272220314,-0.0005260769394226372,-0.0005316560855135322,-0.0005370450089685619,-0.0005422350950539112,-0.0005472181364893913,-0.0005519851110875607,-0.0005565275205299258,-0.000560836517252028,-0.0005649031372740865,-0.0005687187076546252,-0.0005722742062062025,-0.0005755606107413769,-0.0005785689572803676,-0.0005812901654280722,-0.0005837153294123709,-0.0005858350777998567,-0.0005876403884030879,-0.0005891223554499447,-0.0005902716075070202,-0.0005910791223868728,-0.0005915355868637562,-0.0005916319787502289,-0.0005913592176511884,-0.0005907082231715322,-0.0005896699731238186,-0.0005882350960746408,-0.0005863949190825224,-0.000584140419960022,-0.0005814625765196979,-0.0005783525411970913,-0.0005748015828430653,-0.0005708006792701781,-0.000566341623198241,-0.0005614153924398124,-0.0005560137215070426,-0.0005501280538737774,-0.0005437501240521669,-0.0005368716083467007,-0.0005294844741001725,-0.0005215806304477155,-0.0005131522193551064,-0.0005041913827881217,-0.0004946906119585037,-0.00048464236897416413,-0.00047403923235833645,-0.0004628739843610674,-0.0004511395818553865,-0.00043882918544113636,-0.00042593598482199013,-0.00041245343163609505,-0.00039837523945607245,-0.00038369509275071323,-0.0003684070543386042,-0.0003525052743498236,-0.0003359841648489237,-0.0003188383998349309,-0.00030106265330687165,-0.0002826521231327206,-0.00026360194897279143,-0.00024390763428527862,-0.0002235649444628507,-0.00020256983407307416,-0.00018091856327373534,-0.00015860747953411192,-0.00013563339598476887,-0.00011199322761967778,-8.768429688643664e-05,-6.270407175179571e-05,-3.705032941070385e-05,-1.072116538125556e-05,1.6285079254885204e-05,4.396975782583468e-05,7.233396172523499e-05,0.00010137842764379457,0.0001311036612605676,0.00016150982992257923,0.00019259678083471954,0.00022436407743953168,0.00025681103579699993,0.00028993640444241464,0.00032373896101489663,0.0003582169010769576,0.000393368216464296,0.0004291906370781362,0.00046568128163926303,0.0005028372397646308,0.000540655164513737,0.0005791313014924526,0.0006182617507874966,0.0006580420304089785,0.0006984674255363643,0.0007395329885184765,0.0007812332478351891,0.0008235626737587154,0.0008665149798616767,0.0009100838215090334,0.0009542624466121197,0.0009990439284592867,0.0010444207582622766,0.0010903851361945271,0.0011369289131835103,0.0011840437073260546,0.0012317205546423793,0.001279950956813991,0.0013287249021232128,0.001378032611683011,0.0014278643066063523,0.0014782092766836286,0.0015290568117052317,0.0015803962014615536,0.001632215571589768,0.0016845033969730139,0.0017372474540024996,0.0017904357519000769,0.0018440557178109884,0.0018980937311425805,0.0019525372190400958,0.0020073724444955587,0.00206258543767035,0.002118162577971816,0.002174088964238763,0.0022303499281406403,0.002286930801346898,0.002343816217035055,0.0024009915068745613,0.00245843967422843,0.002516145585104823,0.0025740922428667545,0.0026322645135223866,0.002690645167604089,0.0027492172084748745,0.0028079631738364697,0.002866866532713175,0.0029259093571454287,0.0029850744176656008,0.003044343553483486,0.003103698370978236,0.0031631209421902895,0.003222593106329441,0.0032820962369441986,0.003341612173244357,0.003401121124625206,0.003460604464635253,0.003520043333992362,0.003579419106245041,0.0036387117579579353,0.0036979021970182657,0.0037569706328213215,0.0038158982060849667,0.003874664893373847,0.003933251835405827,0.003991637844592333,0.0040498049929738045,0.004107731860131025,0.004165399353951216,0.0042227888479828835,0.0042798793874681,0.00433665094897151,0.0043930839747190475,0.004449159372597933,0.0045048571191728115,0.004560158122330904,0.0046150414273142815,0.004669488873332739,0.004723479971289635,0.004776997026056051,0.004830020014196634,0.004882528446614742,0.0049345046281814575,0.004985929466784,0.005036784801632166,0.0050870515406131744,0.005136711057275534,0.005185746122151613,0.005234136711806059,0.0052818660624325275,0.005328917410224676,0.00537527073174715,0.005420910660177469,0.005465819966048002,0.005509981419891119,0.005553378723561764,0.0055959951132535934,0.00563781475648284,0.005678821355104446,0.005718999542295933,0.0057583339512348175,0.005796810612082481,0.005834413692355156,0.005871128756552935,0.0059069423004984856,0.0059418403543531895,0.005975809879601002,0.006008836440742016,0.006040908396244049,0.006072013173252344,0.006102138664573431,0.006131273694336414,0.006159405689686537,0.006186524871736765,0.006212620064616203,0.006237681023776531,0.006261697970330715,0.006284662522375584,0.0063065639697015285,0.006327395793050528,0.006347146816551685,0.006365812849253416,0.006383384112268686,0.006399854086339474,0.006415217183530331,0.0064294664189219475,0.006442596670240164,0.006454602349549532,0.006465479265898466,0.006475222297012806,0.006483829114586115,0.00649129506200552,0.006497616413980722,0.0065027931705117226,0.0065068211406469345,0.006509698461741209,0.006511426530778408,0.006512001622468233,0.006511426530778408,0.006509698461741209,0.0065068211406469345,0.0065027931705117226,0.006497616413980722,0.006491295527666807,0.006483829114586115,0.006475222297012806,0.006465479265898466,0.006454602349549532,0.006442596670240164,0.0064294664189219475,0.006415217183530331,0.006399854086339474,0.006383383646607399,0.006365812383592129,0.006347146816551685,0.006327395793050528,0.0063065639697015285,0.006284662522375584,0.006261697970330715,0.006237681023776531,0.006212620064616203,0.006186524871736765,0.006159405689686537,0.006131273228675127,0.006102138664573431,0.0060720136389136314,0.006040908861905336,0.006008836440742016,0.005975809413939714,0.0059418403543531895,0.0059069423004984856,0.005871128756552935,0.005834413692355156,0.005796810612082481,0.0057583339512348175,0.00571900000795722,0.005678821355104446,0.00563781475648284,0.005595994647592306,0.005553378723561764,0.005509981419891119,0.005465819966048002,0.0054209111258387566,0.00537527073174715,0.0053289164789021015,0.0052818660624325275,0.005234136711806059,0.005185746122151613,0.005136711057275534,0.0050870515406131744,0.005036785267293453,0.004985929466784,0.0049345046281814575,0.004882528446614742,0.00483001908287406,0.004776997026056051,0.004723480436950922,0.004669488873332739,0.0046150414273142815,0.004560157656669617,0.0045048571191728115,0.004449159372597933,0.0043930839747190475,0.00433665094897151,0.004279878456145525,0.004222788382321596,0.004165399353951216,0.004107731860131025,0.0040498049929738045,0.003991637844592333,0.003933251369744539,0.003874664893373847,0.0038158984389156103,0.0037569706328213215,0.0036979024298489094,0.0036387115251272917,0.003579419106245041,0.003520043333992362,0.003460604464635253,0.003401121124625206,0.00334161170758307,0.003282096702605486,0.0032225933391600847,0.003163121175020933,0.003103698370978236,0.003044343087822199,0.0029850744176656008,0.0029259093571454287,0.002866866532713175,0.0028079634066671133,0.002749216742813587,0.002690645167604089,0.0026322645135223866,0.002574092708528042,0.002516145585104823,0.0024584392085671425,0.002400991041213274,0.002343816217035055,0.0022869310341775417,0.002230350160971284,0.002174088964238763,0.0021181623451411724,0.00206258543767035,0.0020073724444955587,0.0019525372190400958,0.0018980939639732242,0.001844055368565023,0.0017904357519000769,0.0017372474540024996,0.0016845033969730139,0.0016322156880050898,0.0015803960850462317,0.0015290570445358753,0.0014782092766836286,0.0014278643066063523,0.0013780327280983329,0.0013287246692925692,0.001279950956813991,0.0012317206710577011,0.0011840437073260546,0.0011369289131835103,0.0010903850197792053,0.0010444207582622766,0.0009990439284592867,0.0009542625630274415,0.0009100837050937116,0.0008665150380693376,0.0008235626155510545,0.0007812334224581718,0.0007395329885184765,0.0006984673091210425,0.0006580420886166394,0.0006182616925798357,0.0005791314761154354,0.000540655164513737,0.0005028372397646308,0.00046568128163926303,0.00042919054976664484,0.00039336830377578735,0.0003582169010769576,0.0003237389319110662,0.0002899364335462451,0.00025681094848550856,0.0002243641356471926,0.00019259678083471954,0.00016150980081874877,0.00013110367581248283,0.00010137842764379457,7.233396172523499e-05,4.3969761463813484e-05,1.6285075616906397e-05,-1.072116538125556e-05,-3.7050325772725046e-05,-6.270407175179571e-05,-8.768430416239426e-05,-0.00011199322034372017,-0.0001356334105366841,-0.0001586074649821967,-0.00018091856327373534,-0.00020256983407307416,-0.00022356491535902023,-0.00024390766338910908,-0.000263601919868961,-0.00028265215223655105,-0.0003010626824107021,-0.0003188383125234395,-0.00033598419395275414,-0.00035250524524599314,-0.00036840708344243467,-0.00038369506364688277,-0.00039837538497522473,-0.0004124535189475864,-0.0004259359266143292,-0.00043882927275262773,-0.0004511395818553865,-0.0004628741298802197,-0.00047403923235833645,-0.0004846423107665032,-0.0004946906701661646,-0.0005041913827881217,-0.0005131523357704282,-0.0005215806304477155,-0.0005294842994771898,-0.0005368716665543616,-0.000543750065844506,-0.0005501281120814383,-0.0005560137215070426,-0.0005614153342321515,-0.0005663416814059019,-0.0005708006792701781,-0.0005748016410507262,-0.0005783525411970913,-0.0005814624601043761,-0.000584140419960022,-0.0005863949190825224,-0.0005882352706976235,-0.0005896699149161577,-0.0005907081649638712,-0.0005913593340665102,-0.0005916319787502289,-0.000591535703279078,-0.0005910790641792119,-0.0005902713746763766,-0.0005891224718652666,-0.0005876403884030879,-0.0005858351942151785,-0.00058371527120471,-0.0005812900490127504,-0.0005785689572803676,-0.000575560494326055,-0.0005722742644138634,-0.0005687186494469643,-0.0005649029626511037,-0.000560836517252028,-0.0005565274623222649,-0.0005519852857105434,-0.0005472180782817304,-0.0005422349786385894,-0.0005370450089685619,-0.0005316559108905494,-0.00052607711404562,-0.0005203160690143704,-0.0005143817397765815,-0.0005082825664430857,-0.0005020262324251235,-0.0004956213524565101,-0.0004890753771178424,-0.0004823968047276139,-0.0004755928530357778,-0.0004686715255957097,-0.0004616407386492938,-0.0004545073607005179,-0.00044727936619892716,-0.00043996350723318756,-0.0004325671470724046,-0.0004250976780895144,-0.0004175614449195564,-0.00040996583993546665,-0.00040231685852631927,-0.0003946215147152543,-0.0003868863277602941,-0.00037911717663519084,-0.00037132069701328874,-0.00036350247683003545,-0.00035566859878599644,-0.00034782514558173716,-0.00033997721038758755,-0.0003321308468002826,-0.0003242908278480172,-0.00031646271236240864,-0.00030865182634443045,-0.00030086268088780344,-0.00029310048557817936,-0.0002853694895748049,-0.00027767440769821405,-0.00027001998387277126,-0.00026240997249260545,-0.0002548488846514374,-0.0002473403583280742,-0.00023988843895494938,-0.00023249705554917455,-0.0002251693222206086,-0.00021790909522678703,-0.00021071929950267076,-0.000203603325644508,-0.00019656431686598808,-0.00018960489251185209,-0.000182728108484298,-0.0001759363221935928,-0.0001692321675363928,-0.00016261814744211733,-0.00015609627007506788,-0.00014966895105317235,-0.00014333787839859724,-0.0001371050748275593,-0.0001309724320890382,-0.0001249413180630654,-0.00011901350080734119,-0.00011319016630295664,-0.00010747280612122267,-0.00010186236613662913,-9.636003233026713e-05,-9.09668451640755e-05,-8.56834594742395e-05,-8.05107774795033e-05,-7.544928666902706e-05,-7.049958367133513e-05,-6.566219235537574e-05,-6.093728734413162e-05,-5.632524334941991e-05,-5.1826093113049865e-05,-4.743994941236451e-05,-4.3166819523321465e-05,-3.900650699506514e-05,-3.4958869946422055e-05,-3.1023562769405544e-05,-2.7200248950975947e-05,-2.3488513761549257e-05,-1.988778603845276e-05,-1.639752008486539e-05,-1.3017010132898577e-05,-9.745549505169038e-06,-6.5823501245176885e-06,-3.5265300084574847e-06,-5.771799465037475e-07,2.2666868062515277e-06,5.006104402127676e-06,7.642173841304611e-06,1.0176026989938691e-05,1.260887711396208e-05,1.494194111728575e-05,1.717652048682794e-05,1.9313974917167798e-05,2.1355626813601702e-05,2.330293136765249e-05,2.515730375307612e-05,2.692023008421529e-05,2.8593271053978242e-05,3.017791277670767e-05,3.167578688589856e-05,3.308843224658631e-05,3.4417505958117545e-05,3.566468876670115e-05,3.6831570469075814e-05,3.791993003687821e-05,3.893137545674108e-05,3.986767842434347e-05,4.0730588807491586e-05,4.1521798266330734e-05,4.2243114876328036e-05,4.289619391784072e-05,4.3482883484102786e-05,4.4004984374623746e-05,4.446416278369725e-05,4.486229227040894e-05,4.520105358096771e-05,4.548229480860755e-05,4.570769306155853e-05,4.5879060053266585e-05,4.5998207497177646e-05,4.6066757931839675e-05,4.6086584916338325e-05,4.605929643730633e-05,4.598662781063467e-05,4.5870390749769285e-05,4.571213139570318e-05,4.551365054794587e-05,4.527647979557514e-05,4.500233626458794e-05,4.4692878873320296e-05,4.434962465893477e-05,4.3974239815725014e-05,4.356821227702312e-05,4.3133106373716146e-05,4.267055192030966e-05,4.218186222715303e-05,4.1668703488539904e-05,4.1132330807158723e-05,4.057429759996012e-05,3.999601904070005e-05,3.939877569791861e-05,3.878401912515983e-05,3.815295349340886e-05,3.750694668269716e-05,3.684731564135291e-05,3.617517359089106e-05,3.549182656570338e-05,3.479839870124124e-05,3.409602868487127e-05,3.338594615343027e-05,3.26691115333233e-05,3.1946674425853416e-05,3.12196061713621e-05,3.04889526887564e-05,2.9755703508271836e-05,2.9020720830885693e-05,2.8285032385610975e-05,2.7549409423954785e-05,2.6814757802640088e-05,2.6081919713760726e-05,2.5351631848025136e-05,2.462475276843179e-05,2.390188274148386e-05,2.3183807570603676e-05,2.2471223928732798e-05,2.1764706616522744e-05,2.1064957763883285e-05,2.0372477592900395e-05,1.968784818018321e-05,1.9011657059309073e-05,1.8344335330766626e-05,1.7686434148345143e-05,1.7038302758010104e-05,1.6400446838815697e-05,1.577322655066382e-05,1.515698659204645e-05,1.455214987799991e-05,1.3958932868263219e-05,1.3377724826568738e-05,1.2808685823983978e-05,1.2252134183654562e-05,1.1708299098245334e-05,1.1177335181855597e-05,1.0659434337867424e-05,1.0154723895539064e-05,9.663352102506906e-06,9.185434464598075e-06,8.721026460989378e-06,8.270243597507942e-06,7.833064955775626e-06,7.4095446507271845e-06,6.999717697908636e-06,6.60353725834284e-06,6.2209824136516545e-06,5.851983132743044e-06,5.496503490576288e-06,5.154453447175911e-06,4.825709311262472e-06,4.5102065087121446e-06,4.207752681395505e-06,3.918242782674497e-06,3.6415351587493205e-06,3.3774078929127427e-06,3.1257106911652954e-06,2.886218908315641e-06,2.658740186234354e-06,2.4430607936665183e-06,2.238934712295304e-06,2.046118197540636e-06,1.8643389694261714e-06,1.693366584731848e-06,1.532907845103182e-06,1.3826714848619304e-06,1.2423898851920967e-06,1.1117512030978105e-06,9.904496209856006e-07,8.781837550486671e-07,7.746140795461542e-07,6.794280693611654e-07,5.922928494328517e-07,5.128684961164254e-07,4.4082153749513964e-07,3.758023296995816e-07,3.174658331772662e-07,2.6545063747107633e-07,2.1941505679023976e-07,1.789879178204501e-07,1.4381360813331412e-07,1.1353548501347177e-07,8.778690130384348e-08,6.620548731461895e-08,4.842081935407805e-08,3.407516047104764e-08,2.2801613042133795e-08,1.4235336465162618e-08,8.015569541441891e-09,3.777477441957444e-09,1.1632035334940838e-09,-1.8569472348684002e-10,-6.252549034080346e-10,-5.081692289188311e-10,-1.8390318434757802e-10,8.753802262055632e-13])
        self.fir_filter_xxx_0.declare_sample_delay(0)
        self.blocks_multiply_const_xx_0 = blocks.multiply_const_ff(1/(boltz*resistance*bandwidth*1000), 1)
        self.blocks_multiply_const_vxx_0_0 = blocks.multiply_const_cc(volume)
        self.blocks_multiply_const_vxx_0 = blocks.multiply_const_ff(volume)
        self.blocks_complex_to_mag_squared_0 = blocks.complex_to_mag_squared(1)
        self.audio_sink_0 = audio.sink(44100, '', True)
        self.analog_simple_squelch_cc_0 = analog.simple_squelch_cc(squelch, 1)
        self.analog_am_demod_cf_0 = analog.am_demod_cf(
        	channel_rate=44100,
        	audio_decim=1,
        	audio_pass=1000,
        	audio_stop=8000,
        )
        self.analog_agc_xx_0 = analog.agc_cc(6.25e-4, 1.0, 1.0)
        self.analog_agc_xx_0.set_max_gain(65536)



        ##################################################
        # Connections
        ##################################################
        self.connect((self.analog_agc_xx_0, 0), (self.analog_am_demod_cf_0, 0))
        self.connect((self.analog_am_demod_cf_0, 0), (self.blocks_multiply_const_vxx_0, 0))
        self.connect((self.analog_simple_squelch_cc_0, 0), (self.analog_agc_xx_0, 0))
        self.connect((self.blocks_complex_to_mag_squared_0, 0), (self.blocks_multiply_const_xx_0, 0))
        self.connect((self.blocks_multiply_const_vxx_0, 0), (self.audio_sink_0, 0))
        self.connect((self.blocks_multiply_const_vxx_0_0, 0), (self.qtgui_time_sink_x_1, 0))
        self.connect((self.blocks_multiply_const_xx_0, 0), (self.qtgui_time_sink_x_0, 0))
        self.connect((self.fir_filter_xxx_0, 0), (self.analog_simple_squelch_cc_0, 0))
        self.connect((self.fir_filter_xxx_0, 0), (self.blocks_complex_to_mag_squared_0, 0))
        self.connect((self.fir_filter_xxx_0, 0), (self.blocks_multiply_const_vxx_0_0, 0))
        self.connect((self.rtlsdr_source_0, 0), (self.fir_filter_xxx_0, 0))
        self.connect((self.rtlsdr_source_0, 0), (self.qtgui_freq_sink_x_0, 0))


    def closeEvent(self, event):
        self.settings = Qt.QSettings("GNU Radio", "TestV2_2")
        self.settings.setValue("geometry", self.saveGeometry())
        event.accept()

    def get_volume(self):
        return self.volume

    def set_volume(self, volume):
        self.volume = volume
        self.blocks_multiply_const_vxx_0.set_k(self.volume)
        self.blocks_multiply_const_vxx_0_0.set_k(self.volume)

    def get_tuning(self):
        return self.tuning

    def set_tuning(self, tuning):
        self.tuning = tuning
        self.qtgui_freq_sink_x_0.set_frequency_range(self.tuning, self.bandwidth)
        self.rtlsdr_source_0.set_center_freq(self.tuning, 0)

    def get_squelch(self):
        return self.squelch

    def set_squelch(self, squelch):
        self.squelch = squelch
        self.analog_simple_squelch_cc_0.set_threshold(self.squelch)

    def get_samp_rate(self):
        return self.samp_rate

    def set_samp_rate(self, samp_rate):
        self.samp_rate = samp_rate
        self.qtgui_time_sink_x_0.set_samp_rate(self.samp_rate/32)
        self.qtgui_time_sink_x_1.set_samp_rate(self.samp_rate)
        self.rtlsdr_source_0.set_sample_rate(self.samp_rate)

    def get_resistance(self):
        return self.resistance

    def set_resistance(self, resistance):
        self.resistance = resistance
        self.blocks_multiply_const_xx_0.set_k(1/(self.boltz*self.resistance*self.bandwidth*1000))

    def get_boltz(self):
        return self.boltz

    def set_boltz(self, boltz):
        self.boltz = boltz
        self.blocks_multiply_const_xx_0.set_k(1/(self.boltz*self.resistance*self.bandwidth*1000))

    def get_bandwidth(self):
        return self.bandwidth

    def set_bandwidth(self, bandwidth):
        self.bandwidth = bandwidth
        self.blocks_multiply_const_xx_0.set_k(1/(self.boltz*self.resistance*self.bandwidth*1000))
        self.qtgui_freq_sink_x_0.set_frequency_range(self.tuning, self.bandwidth)
        self.rtlsdr_source_0.set_bandwidth(self.bandwidth, 0)





def main(top_block_cls=TestV2_2, options=None):

    if StrictVersion("4.5.0") <= StrictVersion(Qt.qVersion()) < StrictVersion("5.0.0"):
        style = gr.prefs().get_string('qtgui', 'style', 'raster')
        Qt.QApplication.setGraphicsSystem(style)
    qapp = Qt.QApplication(sys.argv)

    tb = top_block_cls()

    tb.start()

    tb.show()

    def sig_handler(sig=None, frame=None):
        Qt.QApplication.quit()

    signal.signal(signal.SIGINT, sig_handler)
    signal.signal(signal.SIGTERM, sig_handler)

    timer = Qt.QTimer()
    timer.start(500)
    timer.timeout.connect(lambda: None)

    def quitting():
        tb.stop()
        tb.wait()

    qapp.aboutToQuit.connect(quitting)
    qapp.exec_()

if __name__ == '__main__':
    main()
