#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#
# SPDX-License-Identifier: GPL-3.0
#
# GNU Radio Python Flow Graph
# Title: RTL-SDR reciever
# Author: Tyler Kovach
# GNU Radio version: 3.8.1.0

from distutils.version import StrictVersion

if __name__ == '__main__':
    import ctypes
    import sys
    if sys.platform.startswith('linux'):
        try:
            x11 = ctypes.cdll.LoadLibrary('libX11.so')
            x11.XInitThreads()
        except:
            print("Warning: failed to XInitThreads()")

from PyQt5 import Qt
from gnuradio import qtgui
from gnuradio.filter import firdes
import sip
from gnuradio import blocks
from gnuradio import filter
from gnuradio import gr
import sys
import signal
from argparse import ArgumentParser
from gnuradio.eng_arg import eng_float, intx
from gnuradio import eng_notation
from gnuradio.qtgui import Range, RangeWidget
import osmosdr
import time

from gnuradio import qtgui

class TestV5(gr.top_block, Qt.QWidget):

    def __init__(self):
        gr.top_block.__init__(self, "RTL-SDR reciever")
        Qt.QWidget.__init__(self)
        self.setWindowTitle("RTL-SDR reciever")
        qtgui.util.check_set_qss()
        try:
            self.setWindowIcon(Qt.QIcon.fromTheme('gnuradio-grc'))
        except:
            pass
        self.top_scroll_layout = Qt.QVBoxLayout()
        self.setLayout(self.top_scroll_layout)
        self.top_scroll = Qt.QScrollArea()
        self.top_scroll.setFrameStyle(Qt.QFrame.NoFrame)
        self.top_scroll_layout.addWidget(self.top_scroll)
        self.top_scroll.setWidgetResizable(True)
        self.top_widget = Qt.QWidget()
        self.top_scroll.setWidget(self.top_widget)
        self.top_layout = Qt.QVBoxLayout(self.top_widget)
        self.top_grid_layout = Qt.QGridLayout()
        self.top_layout.addLayout(self.top_grid_layout)

        self.settings = Qt.QSettings("GNU Radio", "TestV5")

        try:
            if StrictVersion(Qt.qVersion()) < StrictVersion("5.0.0"):
                self.restoreGeometry(self.settings.value("geometry").toByteArray())
            else:
                self.restoreGeometry(self.settings.value("geometry"))
        except:
            pass

        ##################################################
        # Variables
        ##################################################
        self.volume = volume = 50e-3
        self.tuning = tuning = 20.1e6
        self.samp_rate = samp_rate = 1411200
        self.resistance = resistance = 100
        self.boltz = boltz = 1.380648E-23
        self.bandwidth = bandwidth = 300000

        ##################################################
        # Blocks
        ##################################################
        self._volume_range = Range(0, 10, 50e-3, 50e-3, 200)
        self._volume_win = RangeWidget(self._volume_range, self.set_volume, 'volume', "counter_slider", float)
        self.top_grid_layout.addWidget(self._volume_win)
        self._tuning_range = Range(0.5e6, 30e6, 10e3, 20.1e6, 200)
        self._tuning_win = RangeWidget(self._tuning_range, self.set_tuning, 'tuning', "counter_slider", float)
        self.top_grid_layout.addWidget(self._tuning_win)
        self.rtlsdr_source_0 = osmosdr.source(
            args="numchan=" + str(1) + " " + "rtl=0,direct_samp=2"
        )
        self.rtlsdr_source_0.set_time_now(osmosdr.time_spec_t(time.time()), osmosdr.ALL_MBOARDS)
        self.rtlsdr_source_0.set_sample_rate(samp_rate)
        self.rtlsdr_source_0.set_center_freq(tuning, 0)
        self.rtlsdr_source_0.set_freq_corr(0, 0)
        self.rtlsdr_source_0.set_dc_offset_mode(2, 0)
        self.rtlsdr_source_0.set_iq_balance_mode(0, 0)
        self.rtlsdr_source_0.set_gain_mode(False, 0)
        self.rtlsdr_source_0.set_gain(0, 0)
        self.rtlsdr_source_0.set_if_gain(0, 0)
        self.rtlsdr_source_0.set_bb_gain(0, 0)
        self.rtlsdr_source_0.set_antenna('', 0)
        self.rtlsdr_source_0.set_bandwidth(bandwidth, 0)
        self.qtgui_time_sink_x_1 = qtgui.time_sink_c(
            1024, #size
            samp_rate/32, #samp_rate
            "", #name
            1 #number of inputs
        )
        self.qtgui_time_sink_x_1.set_update_time(1)
        self.qtgui_time_sink_x_1.set_y_axis(-1E-2, 1E-2)

        self.qtgui_time_sink_x_1.set_y_label('Amplitude', "")

        self.qtgui_time_sink_x_1.enable_tags(True)
        self.qtgui_time_sink_x_1.set_trigger_mode(qtgui.TRIG_MODE_FREE, qtgui.TRIG_SLOPE_POS, 0.0, 0, 0, "")
        self.qtgui_time_sink_x_1.enable_autoscale(False)
        self.qtgui_time_sink_x_1.enable_grid(False)
        self.qtgui_time_sink_x_1.enable_axis_labels(True)
        self.qtgui_time_sink_x_1.enable_control_panel(False)
        self.qtgui_time_sink_x_1.enable_stem_plot(False)


        labels = ['Signal 1', 'Signal 2', 'Signal 3', 'Signal 4', 'Signal 5',
            'Signal 6', 'Signal 7', 'Signal 8', 'Signal 9', 'Signal 10']
        widths = [1, 1, 1, 1, 1,
            1, 1, 1, 1, 1]
        colors = ['blue', 'red', 'green', 'black', 'cyan',
            'magenta', 'yellow', 'dark red', 'dark green', 'dark blue']
        alphas = [1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0]
        styles = [1, 1, 1, 1, 1,
            1, 1, 1, 1, 1]
        markers = [-1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1]


        for i in range(2):
            if len(labels[i]) == 0:
                if (i % 2 == 0):
                    self.qtgui_time_sink_x_1.set_line_label(i, "Re{{Data {0}}}".format(i/2))
                else:
                    self.qtgui_time_sink_x_1.set_line_label(i, "Im{{Data {0}}}".format(i/2))
            else:
                self.qtgui_time_sink_x_1.set_line_label(i, labels[i])
            self.qtgui_time_sink_x_1.set_line_width(i, widths[i])
            self.qtgui_time_sink_x_1.set_line_color(i, colors[i])
            self.qtgui_time_sink_x_1.set_line_style(i, styles[i])
            self.qtgui_time_sink_x_1.set_line_marker(i, markers[i])
            self.qtgui_time_sink_x_1.set_line_alpha(i, alphas[i])

        self._qtgui_time_sink_x_1_win = sip.wrapinstance(self.qtgui_time_sink_x_1.pyqwidget(), Qt.QWidget)
        self.top_grid_layout.addWidget(self._qtgui_time_sink_x_1_win)
        self.qtgui_time_sink_x_0 = qtgui.time_sink_f(
            2048, #size
            samp_rate/32, #samp_rate
            "", #name
            1 #number of inputs
        )
        self.qtgui_time_sink_x_0.set_update_time(1)
        self.qtgui_time_sink_x_0.set_y_axis(1E-3, -1E-3)

        self.qtgui_time_sink_x_0.set_y_label('Temperature', "Kk")

        self.qtgui_time_sink_x_0.enable_tags(True)
        self.qtgui_time_sink_x_0.set_trigger_mode(qtgui.TRIG_MODE_FREE, qtgui.TRIG_SLOPE_POS, 0.0, 0, 0, "")
        self.qtgui_time_sink_x_0.enable_autoscale(True)
        self.qtgui_time_sink_x_0.enable_grid(False)
        self.qtgui_time_sink_x_0.enable_axis_labels(True)
        self.qtgui_time_sink_x_0.enable_control_panel(False)
        self.qtgui_time_sink_x_0.enable_stem_plot(False)


        labels = ['Signal 1', 'Signal 2', 'Signal 3', 'Signal 4', 'Signal 5',
            'Signal 6', 'Signal 7', 'Signal 8', 'Signal 9', 'Signal 10']
        widths = [1, 1, 1, 1, 1,
            1, 1, 1, 1, 1]
        colors = ['blue', 'red', 'green', 'black', 'cyan',
            'magenta', 'yellow', 'dark red', 'dark green', 'dark blue']
        alphas = [1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0]
        styles = [1, 1, 1, 1, 1,
            1, 1, 1, 1, 1]
        markers = [-1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1]


        for i in range(1):
            if len(labels[i]) == 0:
                self.qtgui_time_sink_x_0.set_line_label(i, "Data {0}".format(i))
            else:
                self.qtgui_time_sink_x_0.set_line_label(i, labels[i])
            self.qtgui_time_sink_x_0.set_line_width(i, widths[i])
            self.qtgui_time_sink_x_0.set_line_color(i, colors[i])
            self.qtgui_time_sink_x_0.set_line_style(i, styles[i])
            self.qtgui_time_sink_x_0.set_line_marker(i, markers[i])
            self.qtgui_time_sink_x_0.set_line_alpha(i, alphas[i])

        self._qtgui_time_sink_x_0_win = sip.wrapinstance(self.qtgui_time_sink_x_0.pyqwidget(), Qt.QWidget)
        self.top_grid_layout.addWidget(self._qtgui_time_sink_x_0_win)
        self.qtgui_freq_sink_x_0 = qtgui.freq_sink_c(
            2048, #size
            firdes.WIN_BLACKMAN_hARRIS, #wintype
            tuning, #fc
            bandwidth, #bw
            "", #name
            1
        )
        self.qtgui_freq_sink_x_0.set_update_time(0.10)
        self.qtgui_freq_sink_x_0.set_y_axis(-140, 10)
        self.qtgui_freq_sink_x_0.set_y_label('Relative Gain', 'dB')
        self.qtgui_freq_sink_x_0.set_trigger_mode(qtgui.TRIG_MODE_FREE, 0.0, 0, "")
        self.qtgui_freq_sink_x_0.enable_autoscale(False)
        self.qtgui_freq_sink_x_0.enable_grid(False)
        self.qtgui_freq_sink_x_0.set_fft_average(0.05)
        self.qtgui_freq_sink_x_0.enable_axis_labels(True)
        self.qtgui_freq_sink_x_0.enable_control_panel(False)



        labels = ['', '', '', '', '',
            '', '', '', '', '']
        widths = [1, 1, 1, 1, 1,
            1, 1, 1, 1, 1]
        colors = ["blue", "red", "green", "black", "cyan",
            "magenta", "yellow", "dark red", "dark green", "dark blue"]
        alphas = [1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0]

        for i in range(1):
            if len(labels[i]) == 0:
                self.qtgui_freq_sink_x_0.set_line_label(i, "Data {0}".format(i))
            else:
                self.qtgui_freq_sink_x_0.set_line_label(i, labels[i])
            self.qtgui_freq_sink_x_0.set_line_width(i, widths[i])
            self.qtgui_freq_sink_x_0.set_line_color(i, colors[i])
            self.qtgui_freq_sink_x_0.set_line_alpha(i, alphas[i])

        self._qtgui_freq_sink_x_0_win = sip.wrapinstance(self.qtgui_freq_sink_x_0.pyqwidget(), Qt.QWidget)
        self.top_grid_layout.addWidget(self._qtgui_freq_sink_x_0_win)
        self.fir_filter_xxx_0 = filter.fir_filter_ccf(32, [ -3.530707282095591e-09,-2.7260715906862742e-09,-1.939386429228307e-09,-1.1151181089630313e-09,-1.9914531135256652e-10,8.645659188566412e-10,2.131152587736551e-09,3.661157821355232e-09,5.5069846460753524e-09,7.732270823623821e-09,1.039582020467833e-08,1.3555244038343517e-08,1.7278827257882767e-08,2.162370726921381e-08,2.6663752095146265e-08,3.244730706342125e-08,3.906420786847775e-08,4.6553601862342475e-08,5.501041755451297e-08,6.449689493592814e-08,7.507693311481489e-08,8.683399954634297e-08,9.983975246541377e-08,1.1416971545941124e-07,1.2989883657610335e-07,1.4711200435613137e-07,1.6589021356594458e-07,1.8629987152962713e-07,2.0843120296376583e-07,2.3238580126871966e-07,2.582463878297858e-07,2.860666938886425e-07,3.159714765388344e-07,3.4803699122676335e-07,3.823546421699575e-07,4.1901702729774115e-07,4.581048642648966e-07,4.997294240638439e-07,5.439811729957e-07,5.909488436373067e-07,6.407320256585081e-07,6.934320708751329e-07,7.491267979276017e-07,8.079269377958553e-07,8.699384466126503e-07,9.352457368549949e-07,1.0039291282737395e-06,1.0761195881059393e-06,1.151870833382418e-06,1.231314058713906e-06,1.3145253205948393e-06,1.4015782880960614e-06,1.4925877849236713e-06,1.5876516954449471e-06,1.686854147919803e-06,1.7902258377944236e-06,1.8979153537657112e-06,2.0099432731512934e-06,2.1264202132442733e-06,2.2474177967524156e-06,2.3729955955786863e-06,2.5032347821252188e-06,2.6381437692180043e-06,2.777812824206194e-06,2.9222971988929203e-06,3.0716128094354644e-06,3.22585128742503e-06,3.3849728424684145e-06,3.5490372738422593e-06,3.718058678714442e-06,3.8920338738535065e-06,4.070996055816067e-06,4.254920895618852e-06,4.443787020136369e-06,4.6375557758437935e-06,4.8362239795096684e-06,5.039735697209835e-06,5.2480063459370285e-06,5.461034561449196e-06,5.678673460352002e-06,5.900884843867971e-06,6.127498636487871e-06,6.3584689087292645e-06,6.5936692408286035e-06,6.832925464550499e-06,7.076070687617175e-06,7.322963938349858e-06,7.573366474389331e-06,7.827134140825365e-06,8.084060027613305e-06,8.343855370185338e-06,8.606305527791847e-06,8.87113310454879e-06,9.138024324784055e-06,9.406702702108305e-06,9.676826266513672e-06,9.94808397081215e-06,1.0220098374702502e-05,1.0492452929611318e-05,1.0764789294626098e-05,1.1036661817342974e-05,1.1307639397273306e-05,1.1577237273741048e-05,1.1844985237985384e-05,1.2110352145100478e-05,1.2372826859063935e-05,1.2631831850740127e-05,1.2886824151792098e-05,1.3137153473508079e-05,1.3382247743720654e-05,1.362145303573925e-05,1.3854043572791852e-05,1.407936815667199e-05,1.4296714653028175e-05,1.4505316357826814e-05,1.4704398381581996e-05,1.4893209481670056e-05,1.5070884728629608e-05,1.523664286651183e-05,1.5389538020826876e-05,1.5528767107753083e-05,1.5653346054023132e-05,1.5762410839670338e-05,1.585494464961812e-05,1.592997978150379e-05,1.5986497601261362e-05,1.6023517673602328e-05,1.6039921320043504e-05,1.6034708096412942e-05,1.600671384949237e-05,1.5954867194523104e-05,1.5878007616265677e-05,1.5774992789374664e-05,1.5644627637811936e-05,1.5485738913412206e-05,1.529709334135987e-05,1.5077454008860514e-05,1.482559491705615e-05,1.4540221854986157e-05,1.4220076991477981e-05,1.3863858839613385e-05,1.3470240446622483e-05,1.303792669204995e-05,1.2565564247779548e-05,1.2051827070536092e-05,1.1495353646751028e-05,1.0894783372350503e-05,1.0248742000840139e-05,9.555869837640785e-06,8.814778084342834e-06,8.024095222936012e-06,7.182427907537203e-06,6.2884037106414326e-06,5.340638381312601e-06,4.337754944572225e-06,3.278380518167978e-06,2.16114790418942e-06,9.847005912888562e-07,-2.523119917441363e-07,-1.5512262052652659e-06,-2.9133661882951856e-06,-4.340040504757781e-06,-5.8325385907664895e-06,-7.3921364673879e-06,-9.020079232868738e-06,-1.0717603800003417e-05,-1.2485901606851257e-05,-1.4326149539556354e-05,-1.6239504475379363e-05,-1.822706326493062e-05,-2.028991912084166e-05,-2.242909795313608e-05,-2.4645620214869268e-05,-2.6940442694467492e-05,-2.9314480343600735e-05,-3.176861355314031e-05,-3.430367723922245e-05,-3.692042446346022e-05,-3.961958282161504e-05,-4.2401828977745026e-05,-4.526776319835335e-05,-4.8217945732176304e-05,-5.125283496454358e-05,-5.4372863814933226e-05,-5.757838880526833e-05,-6.086967187002301e-05,-6.424695311579853e-05,-6.771031621610746e-05,-7.125983393052593e-05,-7.489549170713872e-05,-7.861714402679354e-05,-8.242463081842288e-05,-8.63176173879765e-05,-9.029572538565844e-05,-9.435852552996948e-05,-9.850541391642764e-05,-0.00010273574298480526,-0.0001070486759999767,-0.0001114434126066044,-0.00011591895599849522,-0.00012047415657434613,-0.00012510786473285407,-0.00012981881445739418,-0.00013460546324495226,-0.00013946634135209024,-0.00014439973165281117,-0.0001494038151577115,-0.00015447683108504862,-0.0001596165675437078,-0.0001648209581617266,-0.00017008761642500758,-0.0001754141558194533,-0.00018079802975989878,-0.00018623648793436587,-0.00019172679458279163,-0.00019726583559531718,-0.00020285048231016845,-0.00020847769337706268,-0.00021414381626527756,-0.0002198454167228192,-0.00022557885677088052,-0.00023134016373660415,-0.00023712552501820028,-0.00024293061869684607,-0.00024875125382095575,-0.00025458307936787605,-0.00026042136596515775,-0.00026626151520758867,-0.00027209855034016073,-0.00027792746550403535,-0.00028374313842505217,-0.0002895402139984071,-0.0002953130751848221,-0.000301056366879493,-0.00030676406458951533,-0.00031243040575645864,-0.00031804913305677474,-0.0003236141928937286,-0.0003291191242169589,-0.0003345574368722737,-0.0003399226116016507,-0.00034520754707045853,-0.0003504055493976921,-0.000355509459041059,-0.00036051205825060606,-0.0003654060128610581,-0.0003701839013956487,-0.0003748379822354764,-0.0003793606301769614,-0.00038374384166672826,-0.000387979787774384,-0.00039206029032357037,-0.00039597711293026805,-0.0003997220192104578,-0.000403286365326494,-0.0004066617402713746,-0.0004098395293112844,-0.0004128108557779342,-0.00041556687210686505,-0.00041809884714893997,-0.0004203975840937346,-0.0004224540025461465,-0.00042425881838425994,-0.0004258029512129724,-0.00042707702959887683,-0.0004280715947970748,-0.0004287773626856506,-0.0004291845834814012,-0.00042928391485475004,-0.0004290657816454768,-0.00042852043407037854,-0.0004276382678654045,-0.00042640967876650393,-0.0004248249751981348,-0.0004228744364809245,-0.0004205481964163482,-0.0004178366798441857,-0.0004147303116042167,-0.0004112192546017468,-0.00040729393367655575,-0.0004029445699416101,-0.00039816161734052,-0.0003929357335437089,-0.0003872570232488215,-0.0003811163187492639,-0.000374504248611629,-0.00036741120857186615,-0.00035982829285785556,-0.00035174607182852924,-0.000343155610607937,-0.00033404797432012856,-0.0003244142571929842,-0.0003142456989735365,-0.00030353371403180063,-0.00029226968763396144,-0.00028044552891515195,-0.0002680527977645397,-0.00025508354883641005,-0.0002415298658888787,-0.00022738408006262034,-0.00021263859525788575,-0.00019728601910173893,-0.00018131922115571797,-0.00016473126015625894,-0.0001475153985666111,-0.00012966501526534557,-0.00011117381654912606,-9.203571971738711e-05,-7.224487490020692e-05,-5.1795694162137806e-05,-3.0682778742630035e-05,-8.901050023268908e-06,1.3554319593822584e-05,3.6687892134068534e-05,6.0503953136503696e-05,8.500648254994303e-05,0.00011019916564691812,0.00013608539302367717,0.00016266826423816383,0.00018995058781001717,0.00021793482301291078,0.00024662306532263756,0.0002760170609690249,0.00030611836700700223,0.000336928031174466,0.00036844698479399085,0.0004006754024885595,0.0004336134879849851,0.00046726089203730226,0.0005016169743612409,0.0005366809200495481,0.000572450808249414,0.0006089251837693155,0.000646101834718138,0.0006839780835434794,0.0007225512526929379,0.0007618175004608929,0.0008017735672183335,0.0008424148545600474,0.0008837371715344489,0.0009257356869056821,0.000968404405284673,0.0010117379715666175,0.0010557301575317979,0.0011003745021298528,0.0011456641368567944,0.0011915909126400948,0.0012381476117298007,0.0012853258522227407,0.0013331171358004212,0.0013815121492370963,0.0014305018121376634,0.0014800757635384798,0.0015302239917218685,0.0015809355536475778,0.0016321998555213213,0.0016840051393955946,0.001736339065246284,0.0017891901079565287,0.0018425447633489966,0.0018963910406455398,0.0019507146207615733,0.0020055016502738,0.002060738392174244,0.0021164098288863897,0.002172501292079687,0.0022289976477622986,0.0022858825977891684,0.002343140309676528,0.0024007544852793217,0.0024587083607912064,0.0025169861037284136,0.0025755681563168764,0.0026344379875808954,0.0026935776695609093,0.002752968342974782,0.0028125920798629522,0.0028724304866045713,0.002932462841272354,0.0029926702845841646,0.003053033957257867,0.0031135324388742447,0.0031741478014737368,0.003234857227653265,0.003295641392469406,0.0033564786426723003,0.0034173487219959497,0.0034782306756824255,0.003539102151989937,0.003599941497668624,0.0036607275251299143,0.003721437882632017,0.0037820518482476473,0.0038425452075898647,0.003902897471562028,0.003963084425777197,0.004023085813969374,0.004082877188920975,0.004142437130212784,0.0042017423547804356,0.004260770510882139,0.004319498781114817,0.00437790434807539,0.004435965325683355,0.004493657499551773,0.00455095898360014,0.00460784649476409,0.004664298612624407,0.004720292519778013,0.0047758049331605434,0.004830814432352781,0.004885297268629074,0.00493923295289278,0.004992598667740822,0.0050453729927539825,0.005097533110529184,0.005149058531969786,0.005199926905333996,0.005250119138509035,0.005299611948430538,0.0053483848460018635,0.005396419204771519,0.0054436917416751385,0.005490185227245092,0.005535878706723452,0.005580752156674862,0.005624787881970406,0.005667965393513441,0.005710267927497625,0.0057516745291650295,0.00579217029735446,0.005831735208630562,0.005870353896170855,0.005908008199185133,0.005944682750850916,0.005980361718684435,0.006015028338879347,0.006048667244613171,0.006081264466047287,0.006112806033343077,0.006143277045339346,0.006172663997858763,0.006200954783707857,0.006228135898709297,0.006254196632653475,0.006279123481363058,0.006302906200289726,0.006325535476207733,0.006346998270601034,0.006367287132889032,0.006386392749845982,0.006404306273907423,0.006421019788831472,0.006436525844037533,0.006450816988945007,0.006463887169957161,0.006475730333477259,0.006486340891569853,0.006495714653283358,0.006503847427666187,0.006510734558105469,0.00651637464761734,0.0065207635052502155,0.006523899734020233,0.006525782402604818,0.006526410114020109,0.006525782402604818,0.006523899734020233,0.0065207635052502155,0.00651637464761734,0.006510734558105469,0.006503847893327475,0.006495714653283358,0.006486340891569853,0.006475730333477259,0.006463887169957161,0.006450816988945007,0.006436525844037533,0.006421019788831472,0.006404306273907423,0.006386392749845982,0.006367287132889032,0.006346998270601034,0.006325535476207733,0.006302906200289726,0.006279123481363058,0.006254196632653475,0.006228135898709297,0.0062009552493691444,0.00617266446352005,0.006143277045339346,0.006112806033343077,0.006081264466047287,0.006048667710274458,0.006015028338879347,0.005980361718684435,0.005944682285189629,0.005908008199185133,0.005870353896170855,0.005831735208630562,0.00579217029735446,0.0057516745291650295,0.005710267927497625,0.005667965393513441,0.005624787881970406,0.005580752156674862,0.005535878241062164,0.005490185227245092,0.0054436917416751385,0.005396419204771519,0.005348385311663151,0.005299611482769251,0.0052501182071864605,0.005199927370995283,0.005149058531969786,0.005097533110529184,0.0050453729927539825,0.0049925982020795345,0.00493923295289278,0.004885297268629074,0.004830814432352781,0.0047758049331605434,0.004720292519778013,0.004664298612624407,0.00460784649476409,0.00455095898360014,0.004493657499551773,0.004435964860022068,0.00437790434807539,0.004319499246776104,0.0042607709765434265,0.004201742820441723,0.004142437130212784,0.004082876723259687,0.004023085813969374,0.003963084425777197,0.003902897471562028,0.0038425447419285774,0.00378205138258636,0.003721437882632017,0.003660727757960558,0.0035999417304992676,0.003539102151989937,0.003478230442851782,0.0034173489548265934,0.003356478875502944,0.0032956416253000498,0.0032348574604839087,0.0031741473358124495,0.0031135326717048883,0.0030530341900885105,0.0029926705174148083,0.002932462841272354,0.002872430020943284,0.002812592312693596,0.002752968342974782,0.0026935776695609093,0.0026344379875808954,0.0025755679234862328,0.0025169854052364826,0.00245870859362185,0.0024007544852793217,0.0023431405425071716,0.0022858818992972374,0.0022289976477622986,0.002172501292079687,0.0021164098288863897,0.002060738392174244,0.0020055018831044436,0.0019507142715156078,0.0018963910406455398,0.0018425451125949621,0.0017891901079565287,0.0017363392980769277,0.0016840050229802728,0.0016321998555213213,0.0015809356700628996,0.0015302242245525122,0.0014800758799538016,0.0014305015793070197,0.0013815122656524181,0.0013331171358004212,0.0012853259686380625,0.0012381476117298007,0.001191590796224773,0.0011456639040261507,0.0011003745021298528,0.0010557301575317979,0.0010117379715666175,0.0009684042306616902,0.0009257354540750384,0.0008837371715344489,0.0008424148545600474,0.0008017733343876898,0.0007618175586685538,0.000722551136277616,0.0006839783163741231,0.000646101834718138,0.0006089250673539937,0.0005724508664570749,0.0005366808618418872,0.0005016171489842236,0.00046726089203730226,0.00043361345888115466,0.00040067543159238994,0.0003684468974824995,0.00033692814758978784,0.00030611836700700223,0.00027601703186519444,0.00024662306532263756,0.00021793479390908033,0.00018995064601767808,0.00016266829334199429,0.0001360853639198467,0.00011019916564691812,8.500646072207019e-05,6.050396041246131e-05,3.6687892134068534e-05,1.3554316865338478e-05,-8.901050023268908e-06,-3.068277146667242e-05,-5.1795697800116614e-05,-7.224487490020692e-05,-9.203568333759904e-05,-0.00011117383110104129,-0.00012966498616151512,-0.00014751542767044157,-0.00016473127470817417,-0.00018131920660380274,-0.00019728601910173893,-0.00021263855160214007,-0.00022738412371836603,-0.00024152989499270916,-0.0002550834615249187,-0.0002680528268683702,-0.00028044547070749104,-0.0002922697749454528,-0.00030353368492797017,-0.0003142458153888583,-0.0003244142571929842,-0.00033404791611246765,-0.00034315569791942835,-0.0003517460427246988,-0.00035982838016934693,-0.0003674112376756966,-0.0003745041030924767,-0.00038111640606075525,-0.0003872570232488215,-0.0003929358208552003,-0.0003981617046520114,-0.0004029444244224578,-0.00040729399188421667,-0.00041121916729025543,-0.00041473048622719944,-0.0004178367671556771,-0.00042054810910485685,-0.00042287446558475494,-0.0004248249460943043,-0.00042640988249331713,-0.0004276383842807263,-0.0004285203176550567,-0.00042906583985313773,-0.00042928382754325867,-0.0004291847290005535,-0.00042877733358182013,-0.0004280714492779225,-0.0004270771169103682,-0.0004258029512129724,-0.0004242589639034122,-0.0004224539443384856,-0.00042039743857458234,-0.00041809893446043134,-0.00041556687210686505,-0.0004128110012970865,-0.0004098395293112844,-0.00040666162385605276,-0.00040328639443032444,-0.00039972184458747506,-0.0003959772875532508,-0.00039206029032357037,-0.0003879795840475708,-0.00038374392897821963,-0.0003793605137616396,-0.0003748380986507982,-0.00037018381408415735,-0.00036540586734190583,-0.00036051214556209743,-0.00035550937172956765,-0.00035040563670918345,-0.0003452075179666281,-0.00033992237877100706,-0.0003345574950799346,-0.0003291190369054675,-0.00032361430930905044,-0.00031804913305677474,-0.00031243052217178047,-0.00030676412279717624,-0.0003010562213603407,-0.00029531322070397437,-0.00028954018489457667,-0.00028374328394420445,-0.00027792752371169627,-0.0002720984339248389,-0.0002662615734152496,-0.0002604213368613273,-0.0002545831957831979,-0.0002487512829247862,-0.00024293051683343947,-0.00023712555412203074,-0.0002313401346327737,-0.00022557897318620235,-0.00021984544582664967,-0.0002141437289537862,-0.00020847772248089314,-0.00020285049686208367,-0.00019726592290680856,-0.00019172676547896117,-0.00018623644427862018,-0.00018079810251947492,-0.00017541412671562284,-0.00017008770373649895,-0.0001648209145059809,-0.00015961648023221642,-0.00015447684563696384,-0.0001494038151577115,-0.00014439978986047208,-0.00013946629769634455,-0.0001346053759334609,-0.00012981884356122464,-0.00012510785018093884,-0.00012047423660987988,-0.00011591894872253761,-0.00011144335439894348,-0.00010704869055189192,-0.00010273569205310196,-9.850546484813094e-05,-9.435852552996948e-05,-9.029567445395514e-05,-8.631762466393411e-05,-8.24245871626772e-05,-7.861718040658161e-05,-7.489547715522349e-05,-7.125980482669547e-05,-6.771032349206507e-05,-6.424692401196808e-05,-6.086970824981108e-05,-5.757838152931072e-05,-5.4372900194721296e-05,-5.125283860252239e-05,-4.821791662834585e-05,-4.526779230218381e-05,-4.2401818063808605e-05,-3.96196119254455e-05,-3.692042810143903e-05,-3.4303659049328417e-05,-3.1768635381013155e-05,-2.9314480343600735e-05,-2.6940460884361528e-05,-2.4645622033858672e-05,-2.2429090677178465e-05,-2.0289920939831063e-05,-1.822705780796241e-05,-1.6239511751336977e-05,-1.4326154087029863e-05,-1.2485894330893643e-05,-1.0717606528487522e-05,-9.02008014236344e-06,-7.392140560114058e-06,-5.8325385907664895e-06,-4.3400368667789735e-06,-2.913366870416212e-06,-1.551225750517915e-06,-2.5231219069610233e-07,9.847004776020185e-07,2.1611467673210427e-06,3.27838142766268e-06,4.337753125582822e-06,5.340642474038759e-06,6.288400982157327e-06,7.182421541074291e-06,8.024097041925415e-06,8.814780812826939e-06,9.555873475619592e-06,1.0248748367303051e-05,1.0894776096392889e-05,1.1495357284729835e-05,1.2051827070536092e-05,1.2565576071210671e-05,1.303792669204995e-05,1.3470242265611887e-05,1.3863865206076298e-05,1.422006607754156e-05,1.4540226402459666e-05,1.4825586731603835e-05,1.5077443094924092e-05,1.5297086065402254e-05,1.548574073240161e-05,1.564464400871657e-05,1.577498551341705e-05,1.587799852131866e-05,1.5954872651491314e-05,1.6006715668481775e-05,1.603470263944473e-05,1.603993405296933e-05,1.602352858753875e-05,1.5986504877218977e-05,1.5929952496662736e-05,1.5854942830628715e-05,1.5762405382702127e-05,1.5653358786948957e-05,1.5528768926742487e-05,1.5389527106890455e-05,1.523664286651183e-05,1.5070871086209081e-05,1.4893225852574687e-05,1.470439019612968e-05,1.45053090818692e-05,1.4296715562522877e-05,1.4079379070608411e-05,1.3854053577233572e-05,1.3621449397760443e-05,1.3382242286752444e-05,1.3137167115928605e-05,1.2886805961898062e-05,1.2631855497602373e-05,1.2372823221085127e-05,1.2110350326111075e-05,1.1844979781017173e-05,1.157724364020396e-05,1.1307643944746815e-05,1.1036665455321781e-05,1.0764775652205572e-05,1.0492464753042441e-05,1.0220091098744888e-05,9.948095794243272e-06,9.676859008322936e-06,9.406692697666585e-06,9.138039786193985e-06,8.871130376064684e-06,8.606295523350127e-06,8.343849913217127e-06,8.084063665592112e-06,7.827135959814768e-06,7.573367383884033e-06,7.322942565224366e-06,7.076057045196649e-06,6.832929102529306e-06,6.593654234166024e-06,6.358474365697475e-06,6.127505912445486e-06,5.9008693824580405e-06,5.678661182173528e-06,5.461024102260126e-06,5.2479981604847126e-06,5.039734787715133e-06,4.8362435336457565e-06,4.637577603716636e-06,4.443781563168159e-06,4.254923169355607e-06,4.071017428941559e-06,3.8920456972846296e-06,3.7180429899308365e-06,3.5490465961629525e-06,3.384979208931327e-06,3.2258649298455566e-06,3.0716169021616224e-06,2.922314024544903e-06,2.777803729259176e-06,2.63813649326039e-06,2.5032136363734026e-06,2.3730140128463972e-06,2.247406655442319e-06,2.1264156657707645e-06,2.0099550965824164e-06,1.8978988691742416e-06,1.7902206081998884e-06,1.6868420971150044e-06,1.5876504448897322e-06,1.4925892628525617e-06,1.4015707847647718e-06,1.3145250932211638e-06,1.2313104207350989e-06,1.1518608289406984e-06,1.0761231123979087e-06,1.0039374274128932e-06,9.352316396871174e-07,8.699412887835933e-07,8.079246640591009e-07,7.491287874472619e-07,6.934368457223172e-07,6.407399268937297e-07,5.909488436373067e-07,5.439878236757067e-07,4.997324367650435e-07,4.5810105575583293e-07,4.190255822322797e-07,3.823597864993644e-07,3.480385259990726e-07,3.159758819037961e-07,2.8607882995856926e-07,2.5823331384344783e-07,2.323805006199109e-07,2.0843278036863921e-07,1.862995731016781e-07,1.6589137885603122e-07,1.4711142171108804e-07,1.2989539754926227e-07,1.141686993832991e-07,9.984023563447408e-08,8.682948759997089e-08,7.507353672053796e-08,6.449451461776334e-08,5.501023281340167e-08,4.6556863253499614e-08,3.906136214482103e-08,3.244976909400066e-08,2.6661391316906702e-08,2.1625707447014975e-08,1.728018261815123e-08,1.3555335520720746e-08,1.0395589278289208e-08,7.732270823623821e-09,5.506277656053271e-09,3.6605263264988253e-09,2.131176568553883e-09,8.64227633901038e-10,-1.9914531135256652e-10,-1.1151181089630313e-09,-1.939415295026947e-09,-2.7260715906862742e-09,-3.530707282095591e-09])
        self.fir_filter_xxx_0.declare_sample_delay(0)
        self.blocks_wavfile_sink_1 = blocks.wavfile_sink('filename_imag', 1, int(samp_rate/32), 8)
        self.blocks_wavfile_sink_0 = blocks.wavfile_sink('filename_real', 1, int(samp_rate/32), 8)
        self.blocks_multiply_const_xx_0 = blocks.multiply_const_ff(1/(boltz*resistance*bandwidth*1000), 1)
        self.blocks_multiply_const_vxx_0 = blocks.multiply_const_cc(volume)
        self.blocks_complex_to_mag_squared_0 = blocks.complex_to_mag_squared(1)
        self.blocks_complex_to_float_0 = blocks.complex_to_float(1)



        ##################################################
        # Connections
        ##################################################
        self.connect((self.blocks_complex_to_float_0, 0), (self.blocks_wavfile_sink_0, 0))
        self.connect((self.blocks_complex_to_float_0, 1), (self.blocks_wavfile_sink_1, 0))
        self.connect((self.blocks_complex_to_mag_squared_0, 0), (self.blocks_multiply_const_xx_0, 0))
        self.connect((self.blocks_multiply_const_vxx_0, 0), (self.blocks_complex_to_float_0, 0))
        self.connect((self.blocks_multiply_const_xx_0, 0), (self.qtgui_time_sink_x_0, 0))
        self.connect((self.fir_filter_xxx_0, 0), (self.blocks_complex_to_mag_squared_0, 0))
        self.connect((self.fir_filter_xxx_0, 0), (self.blocks_multiply_const_vxx_0, 0))
        self.connect((self.fir_filter_xxx_0, 0), (self.qtgui_time_sink_x_1, 0))
        self.connect((self.rtlsdr_source_0, 0), (self.fir_filter_xxx_0, 0))
        self.connect((self.rtlsdr_source_0, 0), (self.qtgui_freq_sink_x_0, 0))


    def closeEvent(self, event):
        self.settings = Qt.QSettings("GNU Radio", "TestV5")
        self.settings.setValue("geometry", self.saveGeometry())
        event.accept()

    def get_volume(self):
        return self.volume

    def set_volume(self, volume):
        self.volume = volume
        self.blocks_multiply_const_vxx_0.set_k(self.volume)

    def get_tuning(self):
        return self.tuning

    def set_tuning(self, tuning):
        self.tuning = tuning
        self.qtgui_freq_sink_x_0.set_frequency_range(self.tuning, self.bandwidth)
        self.rtlsdr_source_0.set_center_freq(self.tuning, 0)

    def get_samp_rate(self):
        return self.samp_rate

    def set_samp_rate(self, samp_rate):
        self.samp_rate = samp_rate
        self.qtgui_time_sink_x_0.set_samp_rate(self.samp_rate/32)
        self.qtgui_time_sink_x_1.set_samp_rate(self.samp_rate/32)
        self.rtlsdr_source_0.set_sample_rate(self.samp_rate)

    def get_resistance(self):
        return self.resistance

    def set_resistance(self, resistance):
        self.resistance = resistance
        self.blocks_multiply_const_xx_0.set_k(1/(self.boltz*self.resistance*self.bandwidth*1000))

    def get_boltz(self):
        return self.boltz

    def set_boltz(self, boltz):
        self.boltz = boltz
        self.blocks_multiply_const_xx_0.set_k(1/(self.boltz*self.resistance*self.bandwidth*1000))

    def get_bandwidth(self):
        return self.bandwidth

    def set_bandwidth(self, bandwidth):
        self.bandwidth = bandwidth
        self.blocks_multiply_const_xx_0.set_k(1/(self.boltz*self.resistance*self.bandwidth*1000))
        self.qtgui_freq_sink_x_0.set_frequency_range(self.tuning, self.bandwidth)
        self.rtlsdr_source_0.set_bandwidth(self.bandwidth, 0)





def main(top_block_cls=TestV5, options=None):

    if StrictVersion("4.5.0") <= StrictVersion(Qt.qVersion()) < StrictVersion("5.0.0"):
        style = gr.prefs().get_string('qtgui', 'style', 'raster')
        Qt.QApplication.setGraphicsSystem(style)
    qapp = Qt.QApplication(sys.argv)

    tb = top_block_cls()

    tb.start()

    tb.show()

    def sig_handler(sig=None, frame=None):
        Qt.QApplication.quit()

    signal.signal(signal.SIGINT, sig_handler)
    signal.signal(signal.SIGTERM, sig_handler)

    timer = Qt.QTimer()
    timer.start(500)
    timer.timeout.connect(lambda: None)

    def quitting():
        tb.stop()
        tb.wait()

    qapp.aboutToQuit.connect(quitting)
    qapp.exec_()

if __name__ == '__main__':
    main()
