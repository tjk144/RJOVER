#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#
# SPDX-License-Identifier: GPL-3.0
#
# GNU Radio Python Flow Graph
# Title: RTL-SDR reciever
# Author: Tyler Kovach
# GNU Radio version: 3.8.1.0

from distutils.version import StrictVersion

if __name__ == '__main__':
    import ctypes
    import sys
    if sys.platform.startswith('linux'):
        try:
            x11 = ctypes.cdll.LoadLibrary('libX11.so')
            x11.XInitThreads()
        except:
            print("Warning: failed to XInitThreads()")

from PyQt5 import Qt
from gnuradio import qtgui
from gnuradio.filter import firdes
import sip
from gnuradio import analog
from gnuradio import audio
from gnuradio import blocks
from gnuradio import filter
from gnuradio import gr
import sys
import signal
from argparse import ArgumentParser
from gnuradio.eng_arg import eng_float, intx
from gnuradio import eng_notation
from gnuradio.qtgui import Range, RangeWidget
import osmosdr
import time

from gnuradio import qtgui

class TestV2_1(gr.top_block, Qt.QWidget):

    def __init__(self):
        gr.top_block.__init__(self, "RTL-SDR reciever")
        Qt.QWidget.__init__(self)
        self.setWindowTitle("RTL-SDR reciever")
        qtgui.util.check_set_qss()
        try:
            self.setWindowIcon(Qt.QIcon.fromTheme('gnuradio-grc'))
        except:
            pass
        self.top_scroll_layout = Qt.QVBoxLayout()
        self.setLayout(self.top_scroll_layout)
        self.top_scroll = Qt.QScrollArea()
        self.top_scroll.setFrameStyle(Qt.QFrame.NoFrame)
        self.top_scroll_layout.addWidget(self.top_scroll)
        self.top_scroll.setWidgetResizable(True)
        self.top_widget = Qt.QWidget()
        self.top_scroll.setWidget(self.top_widget)
        self.top_layout = Qt.QVBoxLayout(self.top_widget)
        self.top_grid_layout = Qt.QGridLayout()
        self.top_layout.addLayout(self.top_grid_layout)

        self.settings = Qt.QSettings("GNU Radio", "TestV2_1")

        try:
            if StrictVersion(Qt.qVersion()) < StrictVersion("5.0.0"):
                self.restoreGeometry(self.settings.value("geometry").toByteArray())
            else:
                self.restoreGeometry(self.settings.value("geometry"))
        except:
            pass

        ##################################################
        # Variables
        ##################################################
        self.volume = volume = 50e-3
        self.tuning = tuning = 1.27e6
        self.squelch = squelch = -60
        self.samp_rate = samp_rate = 1536000
        self.resistance = resistance = 100
        self.boltz = boltz = 1.380648E-23
        self.bandwidth = bandwidth = 200000

        ##################################################
        # Blocks
        ##################################################
        self._volume_range = Range(0, 10, 50e-3, 50e-3, 200)
        self._volume_win = RangeWidget(self._volume_range, self.set_volume, 'volume', "counter_slider", float)
        self.top_grid_layout.addWidget(self._volume_win)
        self._tuning_range = Range(0.5e6, 30e6, 10e3, 1.27e6, 200)
        self._tuning_win = RangeWidget(self._tuning_range, self.set_tuning, 'tuning', "counter_slider", float)
        self.top_grid_layout.addWidget(self._tuning_win)
        self._squelch_range = Range(-120, 0, 1, -60, 200)
        self._squelch_win = RangeWidget(self._squelch_range, self.set_squelch, 'squelch', "counter_slider", float)
        self.top_grid_layout.addWidget(self._squelch_win)
        self.rtlsdr_source_0 = osmosdr.source(
            args="numchan=" + str(1) + " " + "rtl=0,direct_samp=2"
        )
        self.rtlsdr_source_0.set_time_now(osmosdr.time_spec_t(time.time()), osmosdr.ALL_MBOARDS)
        self.rtlsdr_source_0.set_sample_rate(samp_rate)
        self.rtlsdr_source_0.set_center_freq(tuning, 0)
        self.rtlsdr_source_0.set_freq_corr(0, 0)
        self.rtlsdr_source_0.set_dc_offset_mode(2, 0)
        self.rtlsdr_source_0.set_iq_balance_mode(0, 0)
        self.rtlsdr_source_0.set_gain_mode(False, 0)
        self.rtlsdr_source_0.set_gain(0, 0)
        self.rtlsdr_source_0.set_if_gain(0, 0)
        self.rtlsdr_source_0.set_bb_gain(0, 0)
        self.rtlsdr_source_0.set_antenna('', 0)
        self.rtlsdr_source_0.set_bandwidth(bandwidth, 0)
        self.qtgui_time_sink_x_1 = qtgui.time_sink_c(
            1024, #size
            samp_rate, #samp_rate
            "", #name
            1 #number of inputs
        )
        self.qtgui_time_sink_x_1.set_update_time(1)
        self.qtgui_time_sink_x_1.set_y_axis(-1E-2, 1E-2)

        self.qtgui_time_sink_x_1.set_y_label('Amplitude', "")

        self.qtgui_time_sink_x_1.enable_tags(True)
        self.qtgui_time_sink_x_1.set_trigger_mode(qtgui.TRIG_MODE_FREE, qtgui.TRIG_SLOPE_POS, 0.0, 0, 0, "")
        self.qtgui_time_sink_x_1.enable_autoscale(False)
        self.qtgui_time_sink_x_1.enable_grid(False)
        self.qtgui_time_sink_x_1.enable_axis_labels(True)
        self.qtgui_time_sink_x_1.enable_control_panel(False)
        self.qtgui_time_sink_x_1.enable_stem_plot(False)


        labels = ['Signal 1', 'Signal 2', 'Signal 3', 'Signal 4', 'Signal 5',
            'Signal 6', 'Signal 7', 'Signal 8', 'Signal 9', 'Signal 10']
        widths = [1, 1, 1, 1, 1,
            1, 1, 1, 1, 1]
        colors = ['blue', 'red', 'green', 'black', 'cyan',
            'magenta', 'yellow', 'dark red', 'dark green', 'dark blue']
        alphas = [1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0]
        styles = [1, 1, 1, 1, 1,
            1, 1, 1, 1, 1]
        markers = [-1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1]


        for i in range(2):
            if len(labels[i]) == 0:
                if (i % 2 == 0):
                    self.qtgui_time_sink_x_1.set_line_label(i, "Re{{Data {0}}}".format(i/2))
                else:
                    self.qtgui_time_sink_x_1.set_line_label(i, "Im{{Data {0}}}".format(i/2))
            else:
                self.qtgui_time_sink_x_1.set_line_label(i, labels[i])
            self.qtgui_time_sink_x_1.set_line_width(i, widths[i])
            self.qtgui_time_sink_x_1.set_line_color(i, colors[i])
            self.qtgui_time_sink_x_1.set_line_style(i, styles[i])
            self.qtgui_time_sink_x_1.set_line_marker(i, markers[i])
            self.qtgui_time_sink_x_1.set_line_alpha(i, alphas[i])

        self._qtgui_time_sink_x_1_win = sip.wrapinstance(self.qtgui_time_sink_x_1.pyqwidget(), Qt.QWidget)
        self.top_grid_layout.addWidget(self._qtgui_time_sink_x_1_win)
        self.qtgui_time_sink_x_0 = qtgui.time_sink_f(
            2048, #size
            samp_rate/32, #samp_rate
            "", #name
            1 #number of inputs
        )
        self.qtgui_time_sink_x_0.set_update_time(1)
        self.qtgui_time_sink_x_0.set_y_axis(1E-3, -1E-3)

        self.qtgui_time_sink_x_0.set_y_label('Temperature', "Kk")

        self.qtgui_time_sink_x_0.enable_tags(True)
        self.qtgui_time_sink_x_0.set_trigger_mode(qtgui.TRIG_MODE_FREE, qtgui.TRIG_SLOPE_POS, 0.0, 0, 0, "")
        self.qtgui_time_sink_x_0.enable_autoscale(True)
        self.qtgui_time_sink_x_0.enable_grid(False)
        self.qtgui_time_sink_x_0.enable_axis_labels(True)
        self.qtgui_time_sink_x_0.enable_control_panel(False)
        self.qtgui_time_sink_x_0.enable_stem_plot(False)


        labels = ['Signal 1', 'Signal 2', 'Signal 3', 'Signal 4', 'Signal 5',
            'Signal 6', 'Signal 7', 'Signal 8', 'Signal 9', 'Signal 10']
        widths = [1, 1, 1, 1, 1,
            1, 1, 1, 1, 1]
        colors = ['blue', 'red', 'green', 'black', 'cyan',
            'magenta', 'yellow', 'dark red', 'dark green', 'dark blue']
        alphas = [1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0]
        styles = [1, 1, 1, 1, 1,
            1, 1, 1, 1, 1]
        markers = [-1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1]


        for i in range(1):
            if len(labels[i]) == 0:
                self.qtgui_time_sink_x_0.set_line_label(i, "Data {0}".format(i))
            else:
                self.qtgui_time_sink_x_0.set_line_label(i, labels[i])
            self.qtgui_time_sink_x_0.set_line_width(i, widths[i])
            self.qtgui_time_sink_x_0.set_line_color(i, colors[i])
            self.qtgui_time_sink_x_0.set_line_style(i, styles[i])
            self.qtgui_time_sink_x_0.set_line_marker(i, markers[i])
            self.qtgui_time_sink_x_0.set_line_alpha(i, alphas[i])

        self._qtgui_time_sink_x_0_win = sip.wrapinstance(self.qtgui_time_sink_x_0.pyqwidget(), Qt.QWidget)
        self.top_grid_layout.addWidget(self._qtgui_time_sink_x_0_win)
        self.qtgui_freq_sink_x_0 = qtgui.freq_sink_c(
            2048, #size
            firdes.WIN_BLACKMAN_hARRIS, #wintype
            tuning, #fc
            bandwidth, #bw
            "", #name
            1
        )
        self.qtgui_freq_sink_x_0.set_update_time(0.10)
        self.qtgui_freq_sink_x_0.set_y_axis(-140, 10)
        self.qtgui_freq_sink_x_0.set_y_label('Relative Gain', 'dB')
        self.qtgui_freq_sink_x_0.set_trigger_mode(qtgui.TRIG_MODE_FREE, 0.0, 0, "")
        self.qtgui_freq_sink_x_0.enable_autoscale(False)
        self.qtgui_freq_sink_x_0.enable_grid(False)
        self.qtgui_freq_sink_x_0.set_fft_average(0.05)
        self.qtgui_freq_sink_x_0.enable_axis_labels(True)
        self.qtgui_freq_sink_x_0.enable_control_panel(False)



        labels = ['', '', '', '', '',
            '', '', '', '', '']
        widths = [1, 1, 1, 1, 1,
            1, 1, 1, 1, 1]
        colors = ["blue", "red", "green", "black", "cyan",
            "magenta", "yellow", "dark red", "dark green", "dark blue"]
        alphas = [1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0]

        for i in range(1):
            if len(labels[i]) == 0:
                self.qtgui_freq_sink_x_0.set_line_label(i, "Data {0}".format(i))
            else:
                self.qtgui_freq_sink_x_0.set_line_label(i, labels[i])
            self.qtgui_freq_sink_x_0.set_line_width(i, widths[i])
            self.qtgui_freq_sink_x_0.set_line_color(i, colors[i])
            self.qtgui_freq_sink_x_0.set_line_alpha(i, alphas[i])

        self._qtgui_freq_sink_x_0_win = sip.wrapinstance(self.qtgui_freq_sink_x_0.pyqwidget(), Qt.QWidget)
        self.top_grid_layout.addWidget(self._qtgui_freq_sink_x_0_win)
        self.fir_filter_xxx_0 = filter.fir_filter_ccf(32, [1.7507604524111264e-12,-3.6780636869515604e-10,-1.0163384578376622e-09,-1.2505098068160692e-09,-3.7138944697368004e-10,2.3270820825871397e-09,7.554954883914888e-09,1.6031732386068143e-08,2.8473897017988747e-08,4.560322608426759e-08,6.815032094209528e-08,9.68416387081561e-08,1.3240598661923286e-07,1.7557192677486455e-07,2.2707097002694354e-07,2.876249141081644e-07,3.579783651730395e-07,4.3882462819055945e-07,5.309012749421527e-07,6.349348495859886e-07,7.516147775277204e-07,8.816467129690864e-07,1.025744609250978e-06,1.1845856988657033e-06,1.3588604588221642e-06,1.5492236116187996e-06,1.7563721712576807e-06,1.9809090190392453e-06,2.2234974039747613e-06,2.484785227352404e-06,2.765359568002168e-06,3.0657929528388195e-06,3.386721346032573e-06,3.7286779388523428e-06,4.0922236621554475e-06,4.477863058127696e-06,4.8861284085433e-06,5.3174944696365856e-06,5.772437816631282e-06,6.2514068304153625e-06,6.754800779162906e-06,7.283047580131097e-06,7.836501026758924e-06,8.41550536279101e-06,9.020404831971973e-06,9.651444088376593e-06,1.0308889613952488e-05,1.0993015166604891e-05,1.1703975360433105e-05,1.2441946637409274e-05,1.3207065421738662e-05,1.399944449076429e-05,1.4819103853369597e-05,1.566613354953006e-05,1.6540478100068867e-05,1.7442076568841003e-05,1.8370888938079588e-05,1.9326715118950233e-05,2.030945324804634e-05,2.1318857761798427e-05,2.235465399280656e-05,2.3416618205374107e-05,2.450431748002302e-05,2.5617377104936168e-05,2.675539508345537e-05,2.7917860279558226e-05,2.9104276109137572e-05,3.0313989554997534e-05,3.1546413083560765e-05,3.280089367763139e-05,3.407659460208379e-05,3.537280281307176e-05,3.668868885142729e-05,3.802332139457576e-05,3.9375740016112104e-05,4.074494427186437e-05,4.212990461383015e-05,4.3529431422939524e-05,4.494246604735963e-05,4.6367662434931844e-05,4.780380186275579e-05,4.924944369122386e-05,5.0703285523923114e-05,5.2163850341457874e-05,5.362955926102586e-05,5.509885522769764e-05,5.6570061133243144e-05,5.8041467127623037e-05,5.95113706367556e-05,6.097794903325848e-05,6.24392123427242e-05,6.389334157574922e-05,6.533825217047706e-05,6.677186320303008e-05,6.819210830144584e-05,6.959674647077918e-05,7.098360947566107e-05,7.235036900965497e-05,7.369459490291774e-05,7.501395157305524e-05,7.630590698681772e-05,7.756799459457397e-05,7.879756594775245e-05,7.999202352948487e-05,8.114863885566592e-05,8.226466889027506e-05,8.333731238963082e-05,8.436378266196698e-05,8.534104563295841e-05,8.626625640317798e-05,8.713642455404624e-05,8.794843597570434e-05,8.869924204191193e-05,8.938574319472536e-05,9.000471618492156e-05,9.055295959115028e-05,9.102723561227322e-05,9.142427734332159e-05,9.174075967166573e-05,9.197329927701503e-05,9.211859287461266e-05,9.217310434905812e-05,9.21335449675098e-05,9.199640771839768e-05,9.175819286610931e-05,9.141537157120183e-05,9.096453140955418e-05,9.040209261002019e-05,8.972456998890266e-05,8.892834011930972e-05,8.800993964541703e-05,8.696581789990887e-05,8.579240966355428e-05,8.4486193372868e-05,8.304360380861908e-05,8.146118489094079e-05,7.973540050443262e-05,7.7862772741355e-05,7.583983096992597e-05,7.366317004198208e-05,7.132936298148707e-05,6.883504102006555e-05,6.617686449317262e-05,6.335153739200905e-05,6.0355836467351764e-05,5.718653119402006e-05,5.384048927226104e-05,5.0314592954237014e-05,4.660585182136856e-05,4.27112499892246e-05,3.862794619635679e-05,3.4353059163549915e-05,2.9883887691539712e-05,2.5217741494998336e-05,2.0352055798866786e-05,1.5284344044630416e-05,1.0012212442234159e-05,4.533374067250406e-06,-1.1543592108864686e-06,-7.053061835904373e-06,-1.3164698430045974e-05,-1.9491109924274497e-05,-2.603401844680775e-05,-3.2795025617815554e-05,-3.9775575714884326e-05,-4.69770202471409e-05,-5.440051972982474e-05,-6.204711826285347e-05,-6.991771078901365e-05,-7.801302126608789e-05,-8.633363177068532e-05,-9.487992792855948e-05,-0.0001036521716741845,-0.00011265043576713651,-0.00012187457468826324,-0.0001313243410550058,-0.00014099922555033118,-0.00015089854423422366,-0.00016102148219943047,-0.00017136693350039423,-0.00018193361756857485,-0.0001927201374201104,-0.0002037247031694278,-0.00021494551037903875,-0.0002263803471578285,-0.00023802692885510623,-0.00024988269433379173,-0.0002619448059704155,-0.0002742102078627795,-0.0002866757567971945,-0.0002993377856910229,-0.00031219268566928804,-0.00032523623667657375,-0.00033846439328044653,-0.0003518726443871856,-0.0003654561296571046,-0.00037920993054285645,-0.00039312857552431524,-0.0004072067386005074,-0.000421438628109172,-0.0004358180449344218,-0.0004503387026488781,-0.0004649940528906882,-0.0004797770525328815,-0.0004946807748638093,-0.000509697652887553,-0.0005248200031928718,-0.0005400399095378816,-0.0005553489900194108,-0.0005707389791496098,-0.0005862006801180542,-0.0006017253617756069,-0.0006173036526888609,-0.0006329256575554609,-0.0006485817139036953,-0.0006642614025622606,-0.0006799545371904969,-0.0006956501747481525,-0.0007113374304026365,-0.0007270047790370882,-0.0007426412776112556,-0.0007582344114780426,-0.0007737726555205882,-0.0007892431458458304,-0.0008046336006373167,-0.0008199314470402896,-0.0008351228898391128,-0.0008501952979713678,-0.000865134468767792,-0.0008799268980510533,-0.0008945584995672107,-0.0009090147796086967,-0.0009232812444679439,-0.000937343284022063,-0.0009511856478638947,-0.0009647933766245842,-0.0009781508706510067,-0.0009912424720823765,-0.0010040526976808906,-0.0010165651328861713,-0.0010287638287991285,-0.0010406322544440627,-0.0010521538788452744,-0.0010633121710270643,-0.0010740900179371238,-0.0010844701901078224,-0.0010944362729787827,-0.0011039702221751213,-0.0011130550410598516,-0.001121673034504056,-0.001129806274548173,-0.0011374374153092504,-0.001144548412412405,-0.0011511212214827538,-0.0011571379145607352,-0.0011625803308561444,-0.0011674306588247418,-0.0011716701555997133,-0.0011752807768061757,-0.0011782447108998895,-0.0011805432150140405,-0.0011821582447737455,-0.0011830711737275124,-0.0011832639575004578,-0.0011827184353023767,-0.0011814164463430643,-0.0011793399462476373,-0.0011764701921492815,-0.0011727898381650448,-0.001168280839920044,-0.0011629251530393958,-0.0011567050823941827,-0.0011496031656861305,-0.0011416013585403562,-0.001132683246396482,-0.0011228307848796248,-0.0011120274430140853,-0.0011002561077475548,-0.0010875002481043339,-0.0010737432166934013,-0.001058968948200345,-0.001043161260895431,-0.0010263044387102127,-0.0010083827655762434,-0.0009893812239170074,-0.0009692847379483283,-0.0009480784647166729,-0.0009257479687221348,-0.000902279163710773,-0.0008776583708822727,-0.0008518719696439803,-0.0008249068632721901,-0.0007967504789121449,-0.0007673901855014265,-0.0007368141086772084,-0.0007050105486996472,-0.0006719683296978474,-0.0006376767996698618,-0.0006021253066137433,-0.0005653042462654412,-0.0005272038979455829,-0.00048781526857055724,-0.0004471298889257014,-0.0004051396681461483,-0.0003618371265474707,-0.00031721495906822383,-0.00027126679196953773,-0.00022398645523935556,-0.00017536859377287328,-0.00012540814350359142,-7.41006588214077e-05,-2.144233076251112e-05,3.257015850977041e-05,8.793951565166935e-05,0.00014466792345046997,0.00020275685528758913,0.0002622073225211352,0.00032301965984515846,0.0003851935616694391,0.00044872815487906337,0.0005136220715939999,0.0005798728088848293,0.0006474779220297933,0.0007164338021539152,0.000786736432928592,0.0008583812741562724,0.0009313625632785261,0.0010056744795292616,0.001081310329027474,0.0011582626029849052,0.0012365235015749931,0.001316084060817957,0.0013969348510727286,0.001479065977036953,0.0015624664956703782,0.0016471253475174308,0.0017330299597233534,0.0018201676430180669,0.0019085248932242393,0.0019980878569185734,0.0020888415165245533,0.0021807702723890543,0.0022738578263670206,0.002368087414652109,0.0024634411092847586,0.002559901913627982,0.0026574498042464256,0.002756065223366022,0.0028557286132127047,0.002956418553367257,0.0030581136234104633,0.003160792402923107,0.003264431143179536,0.0033690067939460278,0.003474494908004999,0.0035808715038001537,0.003688111435621977,0.003796187462285161,0.0039050744380801916,0.0040147448889911175,0.0041251708753407,0.004236325155943632,0.004348177928477526,0.0044606998562812805,0.004573861602693796,0.00468763243407011,0.004801983013749123,0.00491687934845686,0.005032291170209646,0.005148184485733509,0.005264529027044773,0.005381290335208178,0.005498434416949749,0.005615926347672939,0.00573373306542635,0.005851818714290857,0.0059701488353312016,0.006088687106966972,0.006207396741956472,0.006326241884380579,0.006445186212658882,0.006564192473888397,0.006683224346488714,0.006802242249250412,0.006921208929270506,0.007040086667984724,0.007158838212490082,0.007277423515915871,0.0073958043940365314,0.007513941265642643,0.007631796412169933,0.007749329786747694,0.007866503670811653,0.007983275689184666,0.008099609985947609,0.00821546372026205,0.008330798707902431,0.008445577695965767,0.0085597587749362,0.00867330189794302,0.008786167949438095,0.008898318745195866,0.009009714238345623,0.009120316244661808,0.009230082854628563,0.009338977746665478,0.00944695994257927,0.009553994052112103,0.009660040028393269,0.009765056893229485,0.009869009256362915,0.009971858933568,0.010073569603264332,0.010174103081226349,0.010273422114551067,0.010371492244303226,0.010468273423612118,0.010563732124865055,0.010657834820449352,0.0107505414634943,0.010841821320354939,0.010931639932096004,0.011019962839782238,0.011106757447123528,0.011191990226507187,0.01127562951296568,0.011357642710208893,0.011437999084591866,0.011516667902469635,0.011593621224164963,0.011668827384710312,0.01174225751310587,0.011813884600996971,0.011883680708706379,0.011951619759202003,0.012017672881484032,0.012081816792488098,0.012144026346504688,0.012204277329146862,0.012262547388672829,0.012318811379373074,0.01237304974347353,0.012425240129232407,0.012475362047553062,0.01252339594066143,0.012569325044751167,0.012613127939403057,0.012654791586101055,0.01269429363310337,0.012731625698506832,0.012766768224537373,0.012799708172678947,0.012830434367060661,0.012858932837843895,0.012885193340480328,0.012909204699099064,0.012930958531796932,0.012950444594025612,0.01296765822917223,0.01298259012401104,0.012995232827961445,0.013005586341023445,0.013013642281293869,0.013019396923482418,0.013022853061556816,0.013024003244936466,0.013022853061556816,0.013019396923482418,0.013013642281293869,0.013005586341023445,0.012995232827961445,0.012982591055333614,0.01296765822917223,0.012950444594025612,0.012930958531796932,0.012909204699099064,0.012885193340480328,0.012858932837843895,0.012830434367060661,0.012799708172678947,0.012766767293214798,0.012731624767184258,0.01269429363310337,0.012654791586101055,0.012613127939403057,0.012569325044751167,0.01252339594066143,0.012475362047553062,0.012425240129232407,0.01237304974347353,0.012318811379373074,0.012262546457350254,0.012204277329146862,0.012144027277827263,0.012081817723810673,0.012017672881484032,0.011951618827879429,0.011883680708706379,0.011813884600996971,0.01174225751310587,0.011668827384710312,0.011593621224164963,0.011516667902469635,0.01143800001591444,0.011357642710208893,0.01127562951296568,0.011191989295184612,0.011106757447123528,0.011019962839782238,0.010931639932096004,0.010841822251677513,0.0107505414634943,0.010657832957804203,0.010563732124865055,0.010468273423612118,0.010371492244303226,0.010273422114551067,0.010174103081226349,0.010073570534586906,0.009971858933568,0.009869009256362915,0.009765056893229485,0.00966003816574812,0.009553994052112103,0.009446960873901844,0.009338977746665478,0.009230082854628563,0.009120315313339233,0.009009714238345623,0.008898318745195866,0.008786167949438095,0.00867330189794302,0.00855975691229105,0.008445576764643192,0.008330798707902431,0.00821546372026205,0.008099609985947609,0.007983275689184666,0.007866502739489079,0.007749329786747694,0.007631796877831221,0.007513941265642643,0.007395804859697819,0.007277423050254583,0.007158838212490082,0.007040086667984724,0.006921208929270506,0.006802242249250412,0.00668322341516614,0.006564193405210972,0.0064451866783201694,0.006326242350041866,0.006207396741956472,0.006088686175644398,0.0059701488353312016,0.005851818714290857,0.00573373306542635,0.005615926813334227,0.005498433485627174,0.005381290335208178,0.005264529027044773,0.005148185417056084,0.005032291170209646,0.004916878417134285,0.004801982082426548,0.00468763243407011,0.0045738620683550835,0.004460700321942568,0.004348177928477526,0.004236324690282345,0.0041251708753407,0.0040147448889911175,0.0039050744380801916,0.0037961879279464483,0.003688110737130046,0.0035808715038001537,0.003474494908004999,0.0033690067939460278,0.0032644313760101795,0.0031607921700924635,0.0030581140890717506,0.002956418553367257,0.0028557286132127047,0.0027560654561966658,0.0026574493385851383,0.002559901913627982,0.0024634413421154022,0.002368087414652109,0.0022738578263670206,0.0021807700395584106,0.0020888415165245533,0.0019980878569185734,0.001908525126054883,0.0018201674101874232,0.0017330300761386752,0.001647125231102109,0.0015624668449163437,0.001479065977036953,0.001396934618242085,0.0013160841772332788,0.0012365233851596713,0.0011582629522308707,0.001081310329027474,0.0010056744795292616,0.0009313625632785261,0.0008583810995332897,0.0007867366075515747,0.0007164338021539152,0.0006474778638221323,0.0005798728670924902,0.0005136218969710171,0.0004487282712943852,0.0003851935616694391,0.00032301960163749754,0.00026220735162496567,0.00020275685528758913,0.00014466792345046997,8.793952292762697e-05,3.2570151233812794e-05,-2.144233076251112e-05,-7.410065154545009e-05,-0.00012540814350359142,-0.0001753686083247885,-0.00022398644068744034,-0.0002712668210733682,-0.0003172149299643934,-0.0003618371265474707,-0.0004051396681461483,-0.00044712983071804047,-0.00048781532677821815,-0.000527203839737922,-0.0005653043044731021,-0.0006021253648214042,-0.000637676625046879,-0.0006719683879055083,-0.0007050104904919863,-0.0007368141668848693,-0.0007673901272937655,-0.0007967507699504495,-0.0008249070378951728,-0.0008518718532286584,-0.0008776585455052555,-0.000902279163710773,-0.0009257482597604394,-0.0009480784647166729,-0.0009692846215330064,-0.0009893813403323293,-0.0010083827655762434,-0.0010263046715408564,-0.001043161260895431,-0.0010589685989543796,-0.0010737433331087232,-0.001087500131689012,-0.0011002562241628766,-0.0011120274430140853,-0.001122830668464303,-0.0011326833628118038,-0.0011416013585403562,-0.0011496032821014524,-0.0011567050823941827,-0.0011629249202087522,-0.001168280839920044,-0.0011727898381650448,-0.001176470541395247,-0.0011793398298323154,-0.0011814163299277425,-0.0011827186681330204,-0.0011832639575004578,-0.001183071406558156,-0.0011821581283584237,-0.0011805427493527532,-0.0011782449437305331,-0.0011752807768061757,-0.001171670388430357,-0.00116743054240942,-0.0011625800980255008,-0.0011571379145607352,-0.00115112098865211,-0.0011445485288277268,-0.0011374372988939285,-0.0011298059253022075,-0.001121673034504056,-0.0011130549246445298,-0.0011039705714210868,-0.0010944361565634608,-0.0010844699572771788,-0.0010740900179371238,-0.0010633118217810988,-0.00105215422809124,-0.0010406321380287409,-0.001028763479553163,-0.0010165651328861713,-0.001004052464850247,-0.0009912427049130201,-0.0009781507542356849,-0.0009647936094552279,-0.0009511857060715556,-0.0009373430511914194,-0.0009232814772985876,-0.0009090147214010358,-0.0008945587323978543,-0.0008799270144663751,-0.0008651342941448092,-0.0008501953561790287,-0.0008351228898391128,-0.0008199316798709333,-0.0008046337170526385,-0.0007892430294305086,-0.0007737726555205882,-0.0007582343532703817,-0.0007426413940265775,-0.0007270049536600709,-0.0007113371975719929,-0.0006956502911634743,-0.0006799544207751751,-0.0006642616936005652,-0.0006485816556960344,-0.0006329254247248173,-0.0006173036526888609,-0.0006017253617756069,-0.0005862009711563587,-0.0005707389791496098,-0.0005553488153964281,-0.0005400399677455425,-0.0005248199449852109,-0.0005096977693028748,-0.0004946807166561484,-0.00047977687790989876,-0.0004649941110983491,-0.0004503386444412172,-0.00043581819045357406,-0.00042143859900534153,-0.000407206651289016,-0.00039312863373197615,-0.00037920978502370417,-0.000365456216968596,-0.0003518726443871856,-0.0003384643350727856,-0.00032523629488423467,-0.00031219254015013576,-0.0002993379021063447,-0.0002866757567971945,-0.0002742101496551186,-0.0002619448641780764,-0.0002498826361261308,-0.00023802700161468238,-0.00022638033260591328,-0.00021494561224244535,-0.00020372473227325827,-0.00019272006466053426,-0.000181933690328151,-0.000171366918948479,-0.0001610215549590066,-0.00015089857333805412,-0.00014099916734267026,-0.00013132438471075147,-0.00012187457468826324,-0.00011265048669883981,-0.00010365218622609973,-9.487989882472903e-05,-8.633363904664293e-05,-7.801301399013028e-05,-6.991773989284411e-05,-6.204712553881109e-05,-5.4400497901951894e-05,-4.6977027523098513e-05,-3.977557207690552e-05,-3.279504016973078e-05,-2.6034020265797153e-05,-1.9491099010338075e-05,-1.3164700249035377e-05,-7.053060016914969e-06,-1.154359893007495e-06,4.5333736125030555e-06,1.0012208804255351e-05,1.5284347682609223e-05,2.0352053979877383e-05,2.521775422792416e-05,2.98838822345715e-05,3.435304097365588e-05,3.8627949834335595e-05,4.2711253627203405e-05,4.660586273530498e-05,5.031460750615224e-05,5.384046016843058e-05,5.7186542107956484e-05,6.035582555341534e-05,6.335157377179712e-05,6.617686449317262e-05,6.883501191623509e-05,7.13293775334023e-05,7.366314093815163e-05,7.583986007375643e-05,7.786275091348216e-05,7.973535684868693e-05,8.146117761498317e-05,8.304359653266147e-05,8.448622975265607e-05,8.579238783568144e-05,8.696576696820557e-05,8.800996874924749e-05,8.89283255673945e-05,8.972458454081789e-05,9.040210716193542e-05,9.09645896172151e-05,9.141538612311706e-05,9.175812010653317e-05,9.199641499435529e-05,9.213351586367935e-05,9.217316983267665e-05,9.211859287461266e-05,9.197325562126935e-05,9.174078149953857e-05,9.142426279140636e-05,9.102730109589174e-05,9.055295959115028e-05,9.000467252917588e-05,8.938575774664059e-05,8.869924931786954e-05,8.794847963145003e-05,8.713642455404624e-05,8.626621274743229e-05,8.534110384061933e-05,8.436372445430607e-05,8.333740697707981e-05,8.226466161431745e-05,8.114859519992024e-05,7.99920380814001e-05,7.879755139583722e-05,7.756803825031966e-05,7.630590698681772e-05,7.501389336539432e-05,7.369463128270581e-05,7.235034718178213e-05,7.098365313140675e-05,6.959679740248248e-05,6.819205736974254e-05,6.677189230686054e-05,6.53382230666466e-05,6.389334885170683e-05,6.24392123427242e-05,6.09779053775128e-05,5.951140701654367e-05,5.804144166177139e-05,5.657006477122195e-05,5.509881884790957e-05,5.3629515605280176e-05,5.216383942752145e-05,5.070326369605027e-05,4.924950553686358e-05,4.780376548296772e-05,4.636761514120735e-05,4.4942447857465595e-05,4.352941323304549e-05,4.212991552776657e-05,4.074495518580079e-05,3.937569636036642e-05,3.8023314118618146e-05,3.668867066153325e-05,3.5372868296690285e-05,3.407660551602021e-05,3.280089367763139e-05,3.154645310132764e-05,3.03139731840929e-05,2.910429975599982e-05,2.7917865736526437e-05,2.6755449653137475e-05,2.5617371647967957e-05,2.4504268367309123e-05,2.3416598196490668e-05,2.2354670363711193e-05,2.1318868675734848e-05,2.0309447791078128e-05,1.932670420501381e-05,1.837086892919615e-05,1.7442052921978757e-05,1.6540487195015885e-05,1.5666129911551252e-05,1.4819089301454369e-05,1.3999435395817272e-05,1.320707451668568e-05,1.2441964827303309e-05,1.1703966265486088e-05,1.0993006981152575e-05,1.0308906894351821e-05,9.651418622524943e-06,9.020413017424289e-06,8.41550536279101e-06,7.836485565348994e-06,7.283070317498641e-06,6.754815785825485e-06,6.251421382330591e-06,5.772437816631282e-06,5.317480372468708e-06,4.886121587333037e-06,4.477869424590608e-06,4.092236395081272e-06,3.7286779388523428e-06,3.386733169463696e-06,3.065815690206364e-06,2.7653429697238607e-06,2.4847797703841934e-06,2.223502406195621e-06,1.9808992419712013e-06,1.7563675100973342e-06,1.5492281590923085e-06,1.3588561387223308e-06,1.1845856988657033e-06,1.0257369922328508e-06,8.816430749902793e-07,7.516046593991632e-07,6.349316663545324e-07,5.309012749421527e-07,4.388301135804795e-07,3.579758356409002e-07,2.8762721626662824e-07,2.2707097002694354e-07,1.7557380260768696e-07,1.324109746292379e-07,9.68416387081561e-08,6.815032094209528e-08,4.560322608426759e-08,2.8470672930325236e-08,1.6031139082883783e-08,7.554954883914888e-09,2.3264070669881676e-09,-3.7138944697368004e-10,-1.2505098068160692e-09,-1.0163384578376622e-09,-3.6780636869515604e-10,1.7507604524111264e-12])
        self.fir_filter_xxx_0.declare_sample_delay(0)
        self.blocks_multiply_const_xx_0 = blocks.multiply_const_ff(1/(boltz*resistance*bandwidth), 1)
        self.blocks_multiply_const_vxx_0 = blocks.multiply_const_ff(volume)
        self.blocks_complex_to_mag_squared_0 = blocks.complex_to_mag_squared(1)
        self.audio_sink_0 = audio.sink(48000, '', True)
        self.analog_simple_squelch_cc_0 = analog.simple_squelch_cc(squelch, 1)
        self.analog_am_demod_cf_0 = analog.am_demod_cf(
        	channel_rate=48000,
        	audio_decim=1,
        	audio_pass=1000,
        	audio_stop=8000,
        )
        self.analog_agc_xx_0 = analog.agc_cc(6.25e-4, 1.0, 1.0)
        self.analog_agc_xx_0.set_max_gain(65536)



        ##################################################
        # Connections
        ##################################################
        self.connect((self.analog_agc_xx_0, 0), (self.analog_am_demod_cf_0, 0))
        self.connect((self.analog_am_demod_cf_0, 0), (self.blocks_multiply_const_vxx_0, 0))
        self.connect((self.analog_simple_squelch_cc_0, 0), (self.analog_agc_xx_0, 0))
        self.connect((self.blocks_complex_to_mag_squared_0, 0), (self.blocks_multiply_const_xx_0, 0))
        self.connect((self.blocks_multiply_const_vxx_0, 0), (self.audio_sink_0, 0))
        self.connect((self.blocks_multiply_const_xx_0, 0), (self.qtgui_time_sink_x_0, 0))
        self.connect((self.fir_filter_xxx_0, 0), (self.analog_simple_squelch_cc_0, 0))
        self.connect((self.fir_filter_xxx_0, 0), (self.blocks_complex_to_mag_squared_0, 0))
        self.connect((self.fir_filter_xxx_0, 0), (self.qtgui_time_sink_x_1, 0))
        self.connect((self.rtlsdr_source_0, 0), (self.fir_filter_xxx_0, 0))
        self.connect((self.rtlsdr_source_0, 0), (self.qtgui_freq_sink_x_0, 0))


    def closeEvent(self, event):
        self.settings = Qt.QSettings("GNU Radio", "TestV2_1")
        self.settings.setValue("geometry", self.saveGeometry())
        event.accept()

    def get_volume(self):
        return self.volume

    def set_volume(self, volume):
        self.volume = volume
        self.blocks_multiply_const_vxx_0.set_k(self.volume)

    def get_tuning(self):
        return self.tuning

    def set_tuning(self, tuning):
        self.tuning = tuning
        self.qtgui_freq_sink_x_0.set_frequency_range(self.tuning, self.bandwidth)
        self.rtlsdr_source_0.set_center_freq(self.tuning, 0)

    def get_squelch(self):
        return self.squelch

    def set_squelch(self, squelch):
        self.squelch = squelch
        self.analog_simple_squelch_cc_0.set_threshold(self.squelch)

    def get_samp_rate(self):
        return self.samp_rate

    def set_samp_rate(self, samp_rate):
        self.samp_rate = samp_rate
        self.qtgui_time_sink_x_0.set_samp_rate(self.samp_rate/32)
        self.qtgui_time_sink_x_1.set_samp_rate(self.samp_rate)
        self.rtlsdr_source_0.set_sample_rate(self.samp_rate)

    def get_resistance(self):
        return self.resistance

    def set_resistance(self, resistance):
        self.resistance = resistance
        self.blocks_multiply_const_xx_0.set_k(1/(self.boltz*self.resistance*self.bandwidth))

    def get_boltz(self):
        return self.boltz

    def set_boltz(self, boltz):
        self.boltz = boltz
        self.blocks_multiply_const_xx_0.set_k(1/(self.boltz*self.resistance*self.bandwidth))

    def get_bandwidth(self):
        return self.bandwidth

    def set_bandwidth(self, bandwidth):
        self.bandwidth = bandwidth
        self.blocks_multiply_const_xx_0.set_k(1/(self.boltz*self.resistance*self.bandwidth))
        self.qtgui_freq_sink_x_0.set_frequency_range(self.tuning, self.bandwidth)
        self.rtlsdr_source_0.set_bandwidth(self.bandwidth, 0)





def main(top_block_cls=TestV2_1, options=None):

    if StrictVersion("4.5.0") <= StrictVersion(Qt.qVersion()) < StrictVersion("5.0.0"):
        style = gr.prefs().get_string('qtgui', 'style', 'raster')
        Qt.QApplication.setGraphicsSystem(style)
    qapp = Qt.QApplication(sys.argv)

    tb = top_block_cls()

    tb.start()

    tb.show()

    def sig_handler(sig=None, frame=None):
        Qt.QApplication.quit()

    signal.signal(signal.SIGINT, sig_handler)
    signal.signal(signal.SIGTERM, sig_handler)

    timer = Qt.QTimer()
    timer.start(500)
    timer.timeout.connect(lambda: None)

    def quitting():
        tb.stop()
        tb.wait()

    qapp.aboutToQuit.connect(quitting)
    qapp.exec_()

if __name__ == '__main__':
    main()
